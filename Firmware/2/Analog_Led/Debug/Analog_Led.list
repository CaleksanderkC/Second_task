
Analog_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004ce8  08004ce8  00014ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee0  08004ee0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ee0  08004ee0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ee0  08004ee0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee4  08004ee4  00014ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  2000005c  08004f44  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  08004f44  000207f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0ae  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002013  00000000  00000000  0002d17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  0002f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae1  00000000  00000000  0002ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ba1  00000000  00000000  00030a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3a6  00000000  00000000  00056632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7c41  00000000  00000000  000649d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000416c  00000000  00000000  0015c61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00160788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004cd0 	.word	0x08004cd0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08004cd0 	.word	0x08004cd0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <get_sine_val>:
uint32_t sine_val[SAMPLE_SIZE];
uint32_t sawtooth_val[SAMPLE_SIZE];
uint32_t traingle_val[SAMPLE_SIZE];

void get_sine_val()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	for(int i=0; i<SAMPLE_SIZE; i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	e03a      	b.n	8000c02 <get_sine_val+0x82>
	{
		sine_val[i] = (sin(i * 2 * PI/SAMPLE_SIZE) + 1) * ((0xfff + 1)/2);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fc93 	bl	80004bc <__aeabi_i2d>
 8000b96:	a324      	add	r3, pc, #144	; (adr r3, 8000c28 <get_sine_val+0xa8>)
 8000b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9c:	f7ff fcf8 	bl	8000590 <__aeabi_dmul>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <get_sine_val+0x98>)
 8000bae:	f7ff fe19 	bl	80007e4 <__aeabi_ddiv>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	ec43 2b17 	vmov	d7, r2, r3
 8000bba:	eeb0 0a47 	vmov.f32	s0, s14
 8000bbe:	eef0 0a67 	vmov.f32	s1, s15
 8000bc2:	f002 ff39 	bl	8003a38 <sin>
 8000bc6:	ec51 0b10 	vmov	r0, r1, d0
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <get_sine_val+0x9c>)
 8000bd0:	f7ff fb28 	bl	8000224 <__adddf3>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <get_sine_val+0xa0>)
 8000be2:	f7ff fcd5 	bl	8000590 <__aeabi_dmul>
 8000be6:	4602      	mov	r2, r0
 8000be8:	460b      	mov	r3, r1
 8000bea:	4610      	mov	r0, r2
 8000bec:	4619      	mov	r1, r3
 8000bee:	f7ff ffa7 	bl	8000b40 <__aeabi_d2uiz>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	490b      	ldr	r1, [pc, #44]	; (8000c24 <get_sine_val+0xa4>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<SAMPLE_SIZE; i++)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b63      	cmp	r3, #99	; 0x63
 8000c06:	ddc1      	ble.n	8000b8c <get_sine_val+0xc>
	}
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	f3af 8000 	nop.w
 8000c18:	40590000 	.word	0x40590000
 8000c1c:	3ff00000 	.word	0x3ff00000
 8000c20:	40a00000 	.word	0x40a00000
 8000c24:	20000078 	.word	0x20000078
 8000c28:	4d12d84a 	.word	0x4d12d84a
 8000c2c:	400921fb 	.word	0x400921fb

08000c30 <get_sawtooth_val>:

void get_sawtooth_val()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	for(int i=0; i<SAMPLE_SIZE; i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e039      	b.n	8000cb0 <get_sawtooth_val+0x80>
	{
		sawtooth_val[i] = ( fmod(i* 2./SAMPLE_SIZE + 1,  2.) )  * ((0xfff + 1)/2);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fc3d 	bl	80004bc <__aeabi_i2d>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	f7ff faed 	bl	8000224 <__adddf3>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4610      	mov	r0, r2
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <get_sawtooth_val+0x98>)
 8000c58:	f7ff fdc4 	bl	80007e4 <__aeabi_ddiv>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 0200 	mov.w	r2, #0
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <get_sawtooth_val+0x9c>)
 8000c6a:	f7ff fadb 	bl	8000224 <__adddf3>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	ec43 2b17 	vmov	d7, r2, r3
 8000c76:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8000cc0 <get_sawtooth_val+0x90>
 8000c7a:	eeb0 0a47 	vmov.f32	s0, s14
 8000c7e:	eef0 0a67 	vmov.f32	s1, s15
 8000c82:	f002 feab 	bl	80039dc <fmod>
 8000c86:	ec51 0b10 	vmov	r0, r1, d0
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <get_sawtooth_val+0xa0>)
 8000c90:	f7ff fc7e 	bl	8000590 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f7ff ff50 	bl	8000b40 <__aeabi_d2uiz>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <get_sawtooth_val+0xa4>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<SAMPLE_SIZE; i++)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3301      	adds	r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b63      	cmp	r3, #99	; 0x63
 8000cb4:	ddc2      	ble.n	8000c3c <get_sawtooth_val+0xc>
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	40000000 	.word	0x40000000
 8000cc8:	40590000 	.word	0x40590000
 8000ccc:	3ff00000 	.word	0x3ff00000
 8000cd0:	40a00000 	.word	0x40a00000
 8000cd4:	20000208 	.word	0x20000208

08000cd8 <get_traingle_val>:

void get_traingle_val()
{
 8000cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cdc:	ed2d 8b02 	vpush	{d8}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
	float p = SAMPLE_SIZE;
 8000ce4:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <get_traingle_val+0x130>)
 8000ce6:	603b      	str	r3, [r7, #0]
	for(int i=0; i<SAMPLE_SIZE; i++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	e080      	b.n	8000df0 <get_traingle_val+0x118>
	{
		traingle_val[i] =  4./p * fabs( fmod(  fmod(i - p/4., p) + p , p) - p/2. )  * ((0xfff + 1)/2);
 8000cee:	6838      	ldr	r0, [r7, #0]
 8000cf0:	f7ff fbf6 	bl	80004e0 <__aeabi_f2d>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	f04f 0000 	mov.w	r0, #0
 8000cfc:	4943      	ldr	r1, [pc, #268]	; (8000e0c <get_traingle_val+0x134>)
 8000cfe:	f7ff fd71 	bl	80007e4 <__aeabi_ddiv>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	4692      	mov	sl, r2
 8000d08:	469b      	mov	fp, r3
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fbd6 	bl	80004bc <__aeabi_i2d>
 8000d10:	4680      	mov	r8, r0
 8000d12:	4689      	mov	r9, r1
 8000d14:	6838      	ldr	r0, [r7, #0]
 8000d16:	f7ff fbe3 	bl	80004e0 <__aeabi_f2d>
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <get_traingle_val+0x134>)
 8000d20:	f7ff fd60 	bl	80007e4 <__aeabi_ddiv>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4640      	mov	r0, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	f7ff fa78 	bl	8000220 <__aeabi_dsub>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	ec43 2b18 	vmov	d8, r2, r3
 8000d38:	6838      	ldr	r0, [r7, #0]
 8000d3a:	f7ff fbd1 	bl	80004e0 <__aeabi_f2d>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	ec43 2b11 	vmov	d1, r2, r3
 8000d46:	eeb0 0a48 	vmov.f32	s0, s16
 8000d4a:	eef0 0a68 	vmov.f32	s1, s17
 8000d4e:	f002 fe45 	bl	80039dc <fmod>
 8000d52:	ec59 8b10 	vmov	r8, r9, d0
 8000d56:	6838      	ldr	r0, [r7, #0]
 8000d58:	f7ff fbc2 	bl	80004e0 <__aeabi_f2d>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4640      	mov	r0, r8
 8000d62:	4649      	mov	r1, r9
 8000d64:	f7ff fa5e 	bl	8000224 <__adddf3>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	ec43 2b18 	vmov	d8, r2, r3
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f7ff fbb5 	bl	80004e0 <__aeabi_f2d>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	ec43 2b11 	vmov	d1, r2, r3
 8000d7e:	eeb0 0a48 	vmov.f32	s0, s16
 8000d82:	eef0 0a68 	vmov.f32	s1, s17
 8000d86:	f002 fe29 	bl	80039dc <fmod>
 8000d8a:	ec59 8b10 	vmov	r8, r9, d0
 8000d8e:	6838      	ldr	r0, [r7, #0]
 8000d90:	f7ff fba6 	bl	80004e0 <__aeabi_f2d>
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d9c:	f7ff fd22 	bl	80007e4 <__aeabi_ddiv>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4640      	mov	r0, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	f7ff fa3a 	bl	8000220 <__aeabi_dsub>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4614      	mov	r4, r2
 8000db2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000db6:	4622      	mov	r2, r4
 8000db8:	462b      	mov	r3, r5
 8000dba:	4650      	mov	r0, sl
 8000dbc:	4659      	mov	r1, fp
 8000dbe:	f7ff fbe7 	bl	8000590 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <get_traingle_val+0x138>)
 8000dd0:	f7ff fbde 	bl	8000590 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f7ff feb0 	bl	8000b40 <__aeabi_d2uiz>
 8000de0:	4602      	mov	r2, r0
 8000de2:	490c      	ldr	r1, [pc, #48]	; (8000e14 <get_traingle_val+0x13c>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<SAMPLE_SIZE; i++)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3301      	adds	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b63      	cmp	r3, #99	; 0x63
 8000df4:	f77f af7b 	ble.w	8000cee <get_traingle_val+0x16>
	}
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	ecbd 8b02 	vpop	{d8}
 8000e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e08:	42c80000 	.word	0x42c80000
 8000e0c:	40100000 	.word	0x40100000
 8000e10:	40a00000 	.word	0x40a00000
 8000e14:	20000398 	.word	0x20000398

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f000 fb70 	bl	8001502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f839 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 f985 	bl	8001134 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2a:	f000 f949 	bl	80010c0 <MX_DMA_Init>
  MX_DAC1_Init();
 8000e2e:	f000 f87d 	bl	8000f2c <MX_DAC1_Init>
  MX_DAC2_Init();
 8000e32:	f000 f8bf 	bl	8000fb4 <MX_DAC2_Init>
  MX_TIM2_Init();
 8000e36:	f000 f8f7 	bl	8001028 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000e3a:	4811      	ldr	r0, [pc, #68]	; (8000e80 <main+0x68>)
 8000e3c:	f002 fa3c 	bl	80032b8 <HAL_TIM_Base_Start>

  //Sygnał sinusoidalny
  get_sine_val();
 8000e40:	f7ff fe9e 	bl	8000b80 <get_sine_val>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_val, SAMPLE_SIZE, DAC_ALIGN_12B_R);
 8000e44:	2300      	movs	r3, #0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <main+0x6c>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	480e      	ldr	r0, [pc, #56]	; (8000e88 <main+0x70>)
 8000e50:	f000 fd1c 	bl	800188c <HAL_DAC_Start_DMA>

  //Sygnał kształt piły
  get_sawtooth_val();
 8000e54:	f7ff feec 	bl	8000c30 <get_sawtooth_val>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, sawtooth_val, SAMPLE_SIZE, DAC_ALIGN_12B_R);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <main+0x74>)
 8000e60:	2110      	movs	r1, #16
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <main+0x70>)
 8000e64:	f000 fd12 	bl	800188c <HAL_DAC_Start_DMA>

  //Sygnał kształt trójkąta
  get_traingle_val();
 8000e68:	f7ff ff36 	bl	8000cd8 <get_traingle_val>
  HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, traingle_val, SAMPLE_SIZE, DAC_ALIGN_12B_R);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2364      	movs	r3, #100	; 0x64
 8000e72:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <main+0x78>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <main+0x7c>)
 8000e78:	f000 fd08 	bl	800188c <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <main+0x64>
 8000e7e:	bf00      	nop
 8000e80:	20000670 	.word	0x20000670
 8000e84:	20000078 	.word	0x20000078
 8000e88:	20000528 	.word	0x20000528
 8000e8c:	20000208 	.word	0x20000208
 8000e90:	20000398 	.word	0x20000398
 8000e94:	2000053c 	.word	0x2000053c

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	2238      	movs	r2, #56	; 0x38
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fd66 	bl	8003978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ebe:	f001 fbf7 	bl	80026b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000ed8:	234b      	movs	r3, #75	; 0x4b
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fc83 	bl	80027f8 <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000ef8:	f000 f940 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	230f      	movs	r3, #15
 8000efe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	2303      	movs	r3, #3
 8000f02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2104      	movs	r1, #4
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 ff87 	bl	8002e28 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f20:	f000 f92c 	bl	800117c <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3750      	adds	r7, #80	; 0x50
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2230      	movs	r2, #48	; 0x30
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fd1d 	bl	8003978 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_DAC1_Init+0x80>)
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <MX_DAC1_Init+0x84>)
 8000f42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f44:	4819      	ldr	r0, [pc, #100]	; (8000fac <MX_DAC1_Init+0x80>)
 8000f46:	f000 fc7e 	bl	8001846 <HAL_DAC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f50:	f000 f914 	bl	800117c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f54:	2302      	movs	r3, #2
 8000f56:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f64:	2312      	movs	r3, #18
 8000f66:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000f70:	2304      	movs	r3, #4
 8000f72:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <MX_DAC1_Init+0x80>)
 8000f80:	f000 fd70 	bl	8001a64 <HAL_DAC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000f8a:	f000 f8f7 	bl	800117c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2210      	movs	r2, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_DAC1_Init+0x80>)
 8000f96:	f000 fd65 	bl	8001a64 <HAL_DAC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000fa0:	f000 f8ec 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000528 	.word	0x20000528
 8000fb0:	50000800 	.word	0x50000800

08000fb4 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2230      	movs	r2, #48	; 0x30
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fcd9 	bl	8003978 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_DAC2_Init+0x6c>)
 8000fc8:	4a16      	ldr	r2, [pc, #88]	; (8001024 <MX_DAC2_Init+0x70>)
 8000fca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_DAC2_Init+0x6c>)
 8000fce:	f000 fc3a 	bl	8001846 <HAL_DAC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000fd8:	f000 f8d0 	bl	800117c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000fec:	2312      	movs	r3, #18
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_DAC2_Init+0x6c>)
 8001008:	f000 fd2c 	bl	8001a64 <HAL_DAC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001012:	f000 f8b3 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3730      	adds	r7, #48	; 0x30
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000053c 	.word	0x2000053c
 8001024:	50000c00 	.word	0x50000c00

08001028 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_TIM2_Init+0x94>)
 8001048:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 150-1;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_TIM2_Init+0x94>)
 8001050:	2295      	movs	r2, #149	; 0x95
 8001052:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_TIM2_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_TIM2_Init+0x94>)
 800105c:	2263      	movs	r2, #99	; 0x63
 800105e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_TIM2_Init+0x94>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_TIM2_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <MX_TIM2_Init+0x94>)
 800106e:	f002 f8cb 	bl	8003208 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001078:	f000 f880 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <MX_TIM2_Init+0x94>)
 800108a:	f002 f985 	bl	8003398 <HAL_TIM_ConfigClockSource>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001094:	f000 f872 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001098:	2320      	movs	r3, #32
 800109a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_TIM2_Init+0x94>)
 80010a6:	f002 fbd1 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010b0:	f000 f864 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000670 	.word	0x20000670

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_DMA_Init+0x70>)
 80010c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ca:	4a19      	ldr	r2, [pc, #100]	; (8001130 <MX_DMA_Init+0x70>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6493      	str	r3, [r2, #72]	; 0x48
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_DMA_Init+0x70>)
 80010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_DMA_Init+0x70>)
 80010e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <MX_DMA_Init+0x70>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6493      	str	r3, [r2, #72]	; 0x48
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_DMA_Init+0x70>)
 80010ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	200b      	movs	r0, #11
 80010fc:	f000 fb6f 	bl	80017de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001100:	200b      	movs	r0, #11
 8001102:	f000 fb86 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	200c      	movs	r0, #12
 800110c:	f000 fb67 	bl	80017de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001110:	200c      	movs	r0, #12
 8001112:	f000 fb7e 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	200d      	movs	r0, #13
 800111c:	f000 fb5f 	bl	80017de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001120:	200d      	movs	r0, #13
 8001122:	f000 fb76 	bl	8001812 <HAL_NVIC_EnableIRQ>

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_GPIO_Init+0x44>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <MX_GPIO_Init+0x44>)
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_GPIO_Init+0x44>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_GPIO_Init+0x44>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <MX_GPIO_Init+0x44>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_GPIO_Init+0x44>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6b      	ldr	r2, [pc, #428]	; (800139c <HAL_DAC_MspInit+0x1cc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d17b      	bne.n	80012ea <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011f2:	4b6b      	ldr	r3, [pc, #428]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a6a      	ldr	r2, [pc, #424]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b65      	ldr	r3, [pc, #404]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a64      	ldr	r2, [pc, #400]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001222:	2330      	movs	r3, #48	; 0x30
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f001 f8b8 	bl	80023ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800123c:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 800123e:	4a5a      	ldr	r2, [pc, #360]	; (80013a8 <HAL_DAC_MspInit+0x1d8>)
 8001240:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001242:	4b58      	ldr	r3, [pc, #352]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 8001244:	2206      	movs	r2, #6
 8001246:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 800124a:	2210      	movs	r2, #16
 800124c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800125a:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 800125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001260:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 8001264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001268:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 800126c:	2220      	movs	r2, #32
 800126e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001270:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001276:	484b      	ldr	r0, [pc, #300]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 8001278:	f000 fe26 	bl	8001ec8 <HAL_DMA_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001282:	f7ff ff7b 	bl	800117c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_DAC_MspInit+0x1d4>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 8001294:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_DAC_MspInit+0x1e0>)
 8001296:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 800129a:	2207      	movs	r2, #7
 800129c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800129e:	4b43      	ldr	r3, [pc, #268]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012a0:	2210      	movs	r2, #16
 80012a2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80012aa:	4b40      	ldr	r3, [pc, #256]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012b0:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012b8:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012be:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012c2:	2220      	movs	r2, #32
 80012c4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80012cc:	4837      	ldr	r0, [pc, #220]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012ce:	f000 fdfb 	bl	8001ec8 <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 80012d8:	f7ff ff50 	bl	800117c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_DAC_MspInit+0x1dc>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80012e8:	e054      	b.n	8001394 <HAL_DAC_MspInit+0x1c4>
  else if(hdac->Instance==DAC2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a31      	ldr	r2, [pc, #196]	; (80013b4 <HAL_DAC_MspInit+0x1e4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d14f      	bne.n	8001394 <HAL_DAC_MspInit+0x1c4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_DAC_MspInit+0x1d0>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f001 f837 	bl	80023ac <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 8001340:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_DAC_MspInit+0x1ec>)
 8001342:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 8001346:	2229      	movs	r2, #41	; 0x29
 8001348:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 800134c:	2210      	movs	r2, #16
 800134e:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 800135e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001362:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 8001366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 800136e:	2220      	movs	r2, #32
 8001370:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 800137a:	f000 fda5 	bl	8001ec8 <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_DAC_MspInit+0x1b8>
      Error_Handler();
 8001384:	f7ff fefa 	bl	800117c <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_DAC_MspInit+0x1e8>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001394:	bf00      	nop
 8001396:	3730      	adds	r7, #48	; 0x30
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	50000800 	.word	0x50000800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	20000550 	.word	0x20000550
 80013a8:	40020008 	.word	0x40020008
 80013ac:	200005b0 	.word	0x200005b0
 80013b0:	4002001c 	.word	0x4002001c
 80013b4:	50000c00 	.word	0x50000c00
 80013b8:	20000610 	.word	0x20000610
 80013bc:	40020030 	.word	0x40020030

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d0:	d10b      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_Base_MspInit+0x38>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_TIM_Base_MspInit+0x38>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6593      	str	r3, [r2, #88]	; 0x58
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_TIM_Base_MspInit+0x38>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f8ae 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <DMA1_Channel1_IRQHandler+0x10>)
 8001456:	f000 fe5a 	bl	800210e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000550 	.word	0x20000550

08001464 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <DMA1_Channel2_IRQHandler+0x10>)
 800146a:	f000 fe50 	bl	800210e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200005b0 	.word	0x200005b0

08001478 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DMA1_Channel3_IRQHandler+0x10>)
 800147e:	f000 fe46 	bl	800210e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000610 	.word	0x20000610

0800148c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <LoopForever+0x6>)
  ldr r1, =_edata
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <LoopForever+0xe>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014cc:	4c0b      	ldr	r4, [pc, #44]	; (80014fc <LoopForever+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014da:	f7ff ffd7 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f002 fa59 	bl	8003994 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e2:	f7ff fc99 	bl	8000e18 <main>

080014e6 <LoopForever>:

LoopForever:
    b LoopForever
 80014e6:	e7fe      	b.n	80014e6 <LoopForever>
  ldr   r0, =_estack
 80014e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014f4:	08004ee8 	.word	0x08004ee8
  ldr r2, =_sbss
 80014f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014fc:	200007f8 	.word	0x200007f8

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>

08001502 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f95b 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f80e 	bl	8001534 <HAL_InitTick>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	e001      	b.n	8001528 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001524:	f7ff fe30 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001528:	79fb      	ldrb	r3, [r7, #7]

}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_InitTick+0x68>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d022      	beq.n	800158e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_InitTick+0x6c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_InitTick+0x68>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001554:	fbb1 f3f3 	udiv	r3, r1, r3
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f966 	bl	800182e <HAL_SYSTICK_Config>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10f      	bne.n	8001588 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	d809      	bhi.n	8001582 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156e:	2200      	movs	r2, #0
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001576:	f000 f932 	bl	80017de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_InitTick+0x70>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e007      	b.n	8001592 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e004      	b.n	8001592 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e001      	b.n	8001592 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x1c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x20>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_IncTick+0x1c>)
 80015b8:	6013      	str	r3, [r2, #0]
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	200006bc 	.word	0x200006bc
 80015c8:	20000008 	.word	0x20000008

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200006bc 	.word	0x200006bc

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ffee 	bl	80015cc <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015fc:	d004      	beq.n	8001608 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_Delay+0x40>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001608:	bf00      	nop
 800160a:	f7ff ffdf 	bl	80015cc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	429a      	cmp	r2, r3
 8001618:	d8f7      	bhi.n	800160a <HAL_Delay+0x26>
  {
  }
}
 800161a:	bf00      	nop
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000008 	.word	0x20000008

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff29 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff40 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff33 	bl	800168c <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa4 	bl	8001784 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e014      	b.n	8001882 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	791b      	ldrb	r3, [r3, #4]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d105      	bne.n	800186e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fcb1 	bl	80011d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2202      	movs	r2, #2
 8001872:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	795b      	ldrb	r3, [r3, #5]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_DAC_Start_DMA+0x1e>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e0ae      	b.n	8001a08 <HAL_DAC_Start_DMA+0x17c>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2202      	movs	r2, #2
 80018b4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d12f      	bne.n	800191c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a53      	ldr	r2, [pc, #332]	; (8001a10 <HAL_DAC_Start_DMA+0x184>)
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_DAC_Start_DMA+0x188>)
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <HAL_DAC_Start_DMA+0x18c>)
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d013      	beq.n	8001912 <HAL_DAC_Start_DMA+0x86>
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d845      	bhi.n	800197c <HAL_DAC_Start_DMA+0xf0>
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_DAC_Start_DMA+0x72>
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d005      	beq.n	8001908 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80018fc:	e03e      	b.n	800197c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3308      	adds	r3, #8
 8001904:	613b      	str	r3, [r7, #16]
        break;
 8001906:	e03c      	b.n	8001982 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	330c      	adds	r3, #12
 800190e:	613b      	str	r3, [r7, #16]
        break;
 8001910:	e037      	b.n	8001982 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3310      	adds	r3, #16
 8001918:	613b      	str	r3, [r7, #16]
        break;
 800191a:	e032      	b.n	8001982 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a3e      	ldr	r2, [pc, #248]	; (8001a1c <HAL_DAC_Start_DMA+0x190>)
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a3d      	ldr	r2, [pc, #244]	; (8001a20 <HAL_DAC_Start_DMA+0x194>)
 800192a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <HAL_DAC_Start_DMA+0x198>)
 8001932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001942:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	2b08      	cmp	r3, #8
 8001948:	d013      	beq.n	8001972 <HAL_DAC_Start_DMA+0xe6>
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d817      	bhi.n	8001980 <HAL_DAC_Start_DMA+0xf4>
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_DAC_Start_DMA+0xd2>
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d005      	beq.n	8001968 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800195c:	e010      	b.n	8001980 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3314      	adds	r3, #20
 8001964:	613b      	str	r3, [r7, #16]
        break;
 8001966:	e00c      	b.n	8001982 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3318      	adds	r3, #24
 800196e:	613b      	str	r3, [r7, #16]
        break;
 8001970:	e007      	b.n	8001982 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	331c      	adds	r3, #28
 8001978:	613b      	str	r3, [r7, #16]
        break;
 800197a:	e002      	b.n	8001982 <HAL_DAC_Start_DMA+0xf6>
        break;
 800197c:	bf00      	nop
 800197e:	e000      	b.n	8001982 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001980:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d111      	bne.n	80019ac <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001996:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6898      	ldr	r0, [r3, #8]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	f000 fb39 	bl	8002018 <HAL_DMA_Start_IT>
 80019a6:	4603      	mov	r3, r0
 80019a8:	75fb      	strb	r3, [r7, #23]
 80019aa:	e010      	b.n	80019ce <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68d8      	ldr	r0, [r3, #12]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	f000 fb27 	bl	8002018 <HAL_DMA_Start_IT>
 80019ca:	4603      	mov	r3, r0
 80019cc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10f      	bne.n	80019fa <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2201      	movs	r2, #1
 80019e8:	409a      	lsls	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7ff fdf6 	bl	80015e4 <HAL_Delay>
 80019f8:	e005      	b.n	8001a06 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f043 0204 	orr.w	r2, r3, #4
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	08001db5 	.word	0x08001db5
 8001a14:	08001dd7 	.word	0x08001dd7
 8001a18:	08001df3 	.word	0x08001df3
 8001a1c:	08001e5d 	.word	0x08001e5d
 8001a20:	08001e7f 	.word	0x08001e7f
 8001a24:	08001e9b 	.word	0x08001e9b

08001a28 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	795b      	ldrb	r3, [r3, #5]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_DAC_ConfigChannel+0x18>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e192      	b.n	8001da2 <HAL_DAC_ConfigChannel+0x33e>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2202      	movs	r2, #2
 8001a86:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d174      	bne.n	8001b7a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001a90:	f7ff fd9c 	bl	80015cc <HAL_GetTick>
 8001a94:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d134      	bne.n	8001b06 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a9c:	e011      	b.n	8001ac2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a9e:	f7ff fd95 	bl	80015cc <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d90a      	bls.n	8001ac2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f043 0208 	orr.w	r2, r3, #8
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2203      	movs	r2, #3
 8001abc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e16f      	b.n	8001da2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e6      	bne.n	8001a9e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff fd87 	bl	80015e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae0:	e01e      	b.n	8001b20 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ae2:	f7ff fd73 	bl	80015cc <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d90a      	bls.n	8001b06 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f043 0208 	orr.w	r2, r3, #8
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2203      	movs	r2, #3
 8001b00:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e14d      	b.n	8001da2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	dbe8      	blt.n	8001ae2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff fd67 	bl	80015e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	ea02 0103 	and.w	r1, r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	409a      	lsls	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	21ff      	movs	r1, #255	; 0xff
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	ea02 0103 	and.w	r1, r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d11d      	bne.n	8001bbe <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	221f      	movs	r2, #31
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2207      	movs	r2, #7
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	e00f      	b.n	8001c08 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d102      	bne.n	8001bf6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	e008      	b.n	8001c08 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
 8001c02:	e001      	b.n	8001c08 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	6a3a      	ldr	r2, [r7, #32]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	791b      	ldrb	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_DAC_ConfigChannel+0x1d8>
 8001c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3a:	e000      	b.n	8001c3e <HAL_DAC_ConfigChannel+0x1da>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c56:	4013      	ands	r3, r2
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	795b      	ldrb	r3, [r3, #5]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_DAC_ConfigChannel+0x204>
 8001c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c66:	e000      	b.n	8001c6a <HAL_DAC_ConfigChannel+0x206>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d114      	bne.n	8001caa <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001c80:	f001 fa70 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8001c84:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4a48      	ldr	r2, [pc, #288]	; (8001dac <HAL_DAC_ConfigChannel+0x348>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d904      	bls.n	8001c98 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	e00f      	b.n	8001cb8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	4a45      	ldr	r2, [pc, #276]	; (8001db0 <HAL_DAC_ConfigChannel+0x34c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d90a      	bls.n	8001cb6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e006      	b.n	8001cb8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb4:	e000      	b.n	8001cb8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001cb6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6819      	ldr	r1, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d22:	4313      	orrs	r3, r2
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6819      	ldr	r1, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	22c0      	movs	r2, #192	; 0xc0
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43da      	mvns	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	ea02 0103 	and.w	r1, r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	09896800 	.word	0x09896800
 8001db0:	04c4b400 	.word	0x04c4b400

08001db4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7ff fe30 	bl	8001a28 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	711a      	strb	r2, [r3, #4]
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff fe29 	bl	8001a3c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff fe1f 	bl	8001a50 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	711a      	strb	r2, [r3, #4]
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ffd8 	bl	8001e20 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	711a      	strb	r2, [r3, #4]
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7ff ffd1 	bl	8001e34 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff ffc7 	bl	8001e48 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	711a      	strb	r2, [r3, #4]
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e08d      	b.n	8001ff6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_DMA_Init+0x138>)
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d80f      	bhi.n	8001f06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b45      	ldr	r3, [pc, #276]	; (8002004 <HAL_DMA_Init+0x13c>)
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a45      	ldr	r2, [pc, #276]	; (8002008 <HAL_DMA_Init+0x140>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	009a      	lsls	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a42      	ldr	r2, [pc, #264]	; (800200c <HAL_DMA_Init+0x144>)
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
 8001f04:	e00e      	b.n	8001f24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b40      	ldr	r3, [pc, #256]	; (8002010 <HAL_DMA_Init+0x148>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a3d      	ldr	r2, [pc, #244]	; (8002008 <HAL_DMA_Init+0x140>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a3c      	ldr	r2, [pc, #240]	; (8002014 <HAL_DMA_Init+0x14c>)
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f9b6 	bl	80022e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f84:	d102      	bne.n	8001f8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fa0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_DMA_Init+0x104>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d80c      	bhi.n	8001fcc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f9d6 	bl	8002364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	e008      	b.n	8001fde <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020407 	.word	0x40020407
 8002004:	bffdfff8 	.word	0xbffdfff8
 8002008:	cccccccd 	.word	0xcccccccd
 800200c:	40020000 	.word	0x40020000
 8002010:	bffdfbf8 	.word	0xbffdfbf8
 8002014:	40020400 	.word	0x40020400

08002018 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_DMA_Start_IT+0x20>
 8002034:	2302      	movs	r3, #2
 8002036:	e066      	b.n	8002106 <HAL_DMA_Start_IT+0xee>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d155      	bne.n	80020f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f8fb 	bl	800226c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 020e 	orr.w	r2, r2, #14
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e00f      	b.n	80020b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 020a 	orr.w	r2, r2, #10
 80020ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e005      	b.n	8002104 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002100:	2302      	movs	r3, #2
 8002102:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002104:	7dfb      	ldrb	r3, [r7, #23]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2204      	movs	r2, #4
 8002130:	409a      	lsls	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d026      	beq.n	8002188 <HAL_DMA_IRQHandler+0x7a>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d021      	beq.n	8002188 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d107      	bne.n	8002162 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0204 	bic.w	r2, r2, #4
 8002160:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f003 021f 	and.w	r2, r3, #31
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2104      	movs	r1, #4
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	2b00      	cmp	r3, #0
 800217c:	d071      	beq.n	8002262 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002186:	e06c      	b.n	8002262 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2202      	movs	r2, #2
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02e      	beq.n	80021fa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d029      	beq.n	80021fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 020a 	bic.w	r2, r2, #10
 80021c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	2102      	movs	r1, #2
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d038      	beq.n	8002262 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021f8:	e033      	b.n	8002262 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2208      	movs	r2, #8
 8002204:	409a      	lsls	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02a      	beq.n	8002264 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d025      	beq.n	8002264 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 020e 	bic.w	r2, r2, #14
 8002226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f202 	lsl.w	r2, r1, r2
 800223a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002262:	bf00      	nop
 8002264:	bf00      	nop
}
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002282:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	2b00      	cmp	r3, #0
 800228a:	d004      	beq.n	8002296 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002294:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 021f 	and.w	r2, r3, #31
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d108      	bne.n	80022cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022ca:	e007      	b.n	80022dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d802      	bhi.n	8002302 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e001      	b.n	8002306 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002304:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3b08      	subs	r3, #8
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002332:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2201      	movs	r2, #1
 800233c:	409a      	lsls	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40020407 	.word	0x40020407
 8002354:	40020800 	.word	0x40020800
 8002358:	40020820 	.word	0x40020820
 800235c:	cccccccd 	.word	0xcccccccd
 8002360:	40020880 	.word	0x40020880

08002364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002386:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3b01      	subs	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2201      	movs	r2, #1
 8002392:	409a      	lsls	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	1000823f 	.word	0x1000823f
 80023a8:	40020940 	.word	0x40020940

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023ba:	e15a      	b.n	8002672 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 814c 	beq.w	800266c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d005      	beq.n	80023ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d130      	bne.n	800244e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002422:	2201      	movs	r2, #1
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 0201 	and.w	r2, r3, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b03      	cmp	r3, #3
 8002458:	d017      	beq.n	800248a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d123      	bne.n	80024de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	6939      	ldr	r1, [r7, #16]
 80024da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0203 	and.w	r2, r3, #3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80a6 	beq.w	800266c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002520:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <HAL_GPIO_Init+0x2e4>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	4a5a      	ldr	r2, [pc, #360]	; (8002690 <HAL_GPIO_Init+0x2e4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6613      	str	r3, [r2, #96]	; 0x60
 800252c:	4b58      	ldr	r3, [pc, #352]	; (8002690 <HAL_GPIO_Init+0x2e4>)
 800252e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002538:	4a56      	ldr	r2, [pc, #344]	; (8002694 <HAL_GPIO_Init+0x2e8>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002562:	d01f      	beq.n	80025a4 <HAL_GPIO_Init+0x1f8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a4c      	ldr	r2, [pc, #304]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d019      	beq.n	80025a0 <HAL_GPIO_Init+0x1f4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a4b      	ldr	r2, [pc, #300]	; (800269c <HAL_GPIO_Init+0x2f0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <HAL_GPIO_Init+0x1f0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a4a      	ldr	r2, [pc, #296]	; (80026a0 <HAL_GPIO_Init+0x2f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00d      	beq.n	8002598 <HAL_GPIO_Init+0x1ec>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a49      	ldr	r2, [pc, #292]	; (80026a4 <HAL_GPIO_Init+0x2f8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d007      	beq.n	8002594 <HAL_GPIO_Init+0x1e8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a48      	ldr	r2, [pc, #288]	; (80026a8 <HAL_GPIO_Init+0x2fc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_GPIO_Init+0x1e4>
 800258c:	2305      	movs	r3, #5
 800258e:	e00a      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 8002590:	2306      	movs	r3, #6
 8002592:	e008      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 8002594:	2304      	movs	r3, #4
 8002596:	e006      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 8002598:	2303      	movs	r3, #3
 800259a:	e004      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 800259c:	2302      	movs	r3, #2
 800259e:	e002      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 80025a4:	2300      	movs	r3, #0
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	f002 0203 	and.w	r2, r2, #3
 80025ac:	0092      	lsls	r2, r2, #2
 80025ae:	4093      	lsls	r3, r2
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b6:	4937      	ldr	r1, [pc, #220]	; (8002694 <HAL_GPIO_Init+0x2e8>)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_GPIO_Init+0x300>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025e8:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_GPIO_Init+0x300>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_GPIO_Init+0x300>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002612:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_GPIO_Init+0x300>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800263c:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_GPIO_Init+0x300>)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002666:	4a11      	ldr	r2, [pc, #68]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f ae9d 	bne.w	80023bc <HAL_GPIO_Init+0x10>
  }
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40021000 	.word	0x40021000
 8002694:	40010000 	.word	0x40010000
 8002698:	48000400 	.word	0x48000400
 800269c:	48000800 	.word	0x48000800
 80026a0:	48000c00 	.word	0x48000c00
 80026a4:	48001000 	.word	0x48001000
 80026a8:	48001400 	.word	0x48001400
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d141      	bne.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026be:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ca:	d131      	bne.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026cc:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d2:	4a46      	ldr	r2, [pc, #280]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026dc:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e4:	4a41      	ldr	r2, [pc, #260]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ec:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2232      	movs	r2, #50	; 0x32
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	0c9b      	lsrs	r3, r3, #18
 80026fe:	3301      	adds	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002702:	e002      	b.n	800270a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3b01      	subs	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002716:	d102      	bne.n	800271e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f2      	bne.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d158      	bne.n	80027de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e057      	b.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002736:	4a2d      	ldr	r2, [pc, #180]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800273c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002740:	e04d      	b.n	80027de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d141      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002756:	d131      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275e:	4a23      	ldr	r2, [pc, #140]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002770:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2232      	movs	r2, #50	; 0x32
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	4a1c      	ldr	r2, [pc, #112]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	0c9b      	lsrs	r3, r3, #18
 800278a:	3301      	adds	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278e:	e002      	b.n	8002796 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3b01      	subs	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a2:	d102      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f2      	bne.n	8002790 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d112      	bne.n	80027de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e011      	b.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027cc:	e007      	b.n	80027de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40007000 	.word	0x40007000
 80027f0:	20000000 	.word	0x20000000
 80027f4:	431bde83 	.word	0x431bde83

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e306      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d075      	beq.n	8002902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002816:	4b97      	ldr	r3, [pc, #604]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002820:	4b94      	ldr	r3, [pc, #592]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d102      	bne.n	8002836 <HAL_RCC_OscConfig+0x3e>
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d002      	beq.n	800283c <HAL_RCC_OscConfig+0x44>
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d10b      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	4b8d      	ldr	r3, [pc, #564]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05b      	beq.n	8002900 <HAL_RCC_OscConfig+0x108>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d157      	bne.n	8002900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e2e1      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d106      	bne.n	800286c <HAL_RCC_OscConfig+0x74>
 800285e:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a84      	ldr	r2, [pc, #528]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b7f      	ldr	r3, [pc, #508]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7e      	ldr	r2, [pc, #504]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b7c      	ldr	r3, [pc, #496]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7b      	ldr	r2, [pc, #492]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 8002890:	4b78      	ldr	r3, [pc, #480]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a77      	ldr	r2, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a74      	ldr	r2, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fe8c 	bl	80015cc <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fe88 	bl	80015cc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e2a6      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ca:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xc0>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fe78 	bl	80015cc <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe fe74 	bl	80015cc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e292      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f2:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0xe8>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d075      	beq.n	80029fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290e:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002918:	4b56      	ldr	r3, [pc, #344]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d102      	bne.n	800292e <HAL_RCC_OscConfig+0x136>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d002      	beq.n	8002934 <HAL_RCC_OscConfig+0x13c>
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11f      	bne.n	8002974 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002934:	4b4f      	ldr	r3, [pc, #316]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_OscConfig+0x154>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e265      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	4946      	ldr	r1, [pc, #280]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002960:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe fde5 	bl	8001534 <HAL_InitTick>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d043      	beq.n	80029f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e251      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d023      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a3c      	ldr	r2, [pc, #240]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fe20 	bl	80015cc <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe fe1c 	bl	80015cc <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e23a      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	061b      	lsls	r3, r3, #24
 80029bc:	492d      	ldr	r1, [pc, #180]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
 80029c2:	e01a      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80029ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fdfc 	bl	80015cc <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d8:	f7fe fdf8 	bl	80015cc <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e216      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x1e0>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d041      	beq.n	8002a8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fdd5 	bl	80015cc <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a26:	f7fe fdd1 	bl	80015cc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1ef      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0ef      	beq.n	8002a26 <HAL_RCC_OscConfig+0x22e>
 8002a46:	e020      	b.n	8002a8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fdb8 	bl	80015cc <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a5e:	e00d      	b.n	8002a7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7fe fdb4 	bl	80015cc <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d906      	bls.n	8002a7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1d2      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a7c:	4b8c      	ldr	r3, [pc, #560]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ea      	bne.n	8002a60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80a6 	beq.w	8002be4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a9c:	4b84      	ldr	r3, [pc, #528]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_OscConfig+0x2b4>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x2b6>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b7f      	ldr	r3, [pc, #508]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	4a7e      	ldr	r2, [pc, #504]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abc:	6593      	str	r3, [r2, #88]	; 0x58
 8002abe:	4b7c      	ldr	r3, [pc, #496]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002aca:	2301      	movs	r3, #1
 8002acc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ace:	4b79      	ldr	r3, [pc, #484]	; (8002cb4 <HAL_RCC_OscConfig+0x4bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d118      	bne.n	8002b0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ada:	4b76      	ldr	r3, [pc, #472]	; (8002cb4 <HAL_RCC_OscConfig+0x4bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a75      	ldr	r2, [pc, #468]	; (8002cb4 <HAL_RCC_OscConfig+0x4bc>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae6:	f7fe fd71 	bl	80015cc <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aee:	f7fe fd6d 	bl	80015cc <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e18b      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b00:	4b6c      	ldr	r3, [pc, #432]	; (8002cb4 <HAL_RCC_OscConfig+0x4bc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d108      	bne.n	8002b26 <HAL_RCC_OscConfig+0x32e>
 8002b14:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	4a65      	ldr	r2, [pc, #404]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b24:	e024      	b.n	8002b70 <HAL_RCC_OscConfig+0x378>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d110      	bne.n	8002b50 <HAL_RCC_OscConfig+0x358>
 8002b2e:	4b60      	ldr	r3, [pc, #384]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	4a5e      	ldr	r2, [pc, #376]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a5a      	ldr	r2, [pc, #360]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b4e:	e00f      	b.n	8002b70 <HAL_RCC_OscConfig+0x378>
 8002b50:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	4a56      	ldr	r2, [pc, #344]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fd28 	bl	80015cc <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe fd24 	bl	80015cc <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e140      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b96:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ed      	beq.n	8002b80 <HAL_RCC_OscConfig+0x388>
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fd11 	bl	80015cc <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe fd0d 	bl	80015cc <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e129      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1ed      	bne.n	8002bae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bd2:	7ffb      	ldrb	r3, [r7, #31]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d105      	bne.n	8002be4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d03c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fce0 	bl	80015cc <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c10:	f7fe fcdc 	bl	80015cc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0fa      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCC_OscConfig+0x418>
 8002c30:	e01b      	b.n	8002c6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c38:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fe fcc3 	bl	80015cc <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c4a:	f7fe fcbf 	bl	80015cc <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0dd      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ef      	bne.n	8002c4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80d1 	beq.w	8002e16 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	f000 808b 	beq.w	8002d98 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d15e      	bne.n	8002d48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <HAL_RCC_OscConfig+0x4b8>)
 8002c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe fc99 	bl	80015cc <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	e00c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fc95 	bl	80015cc <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d905      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0b3      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb8:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ec      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc4:	4b56      	ldr	r3, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <HAL_RCC_OscConfig+0x62c>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6a11      	ldr	r1, [r2, #32]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cde:	0212      	lsls	r2, r2, #8
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ce6:	0852      	lsrs	r2, r2, #1
 8002ce8:	3a01      	subs	r2, #1
 8002cea:	0552      	lsls	r2, r2, #21
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cf2:	0852      	lsrs	r2, r2, #1
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0652      	lsls	r2, r2, #25
 8002cf8:	4311      	orrs	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cfe:	06d2      	lsls	r2, r2, #27
 8002d00:	430a      	orrs	r2, r1
 8002d02:	4947      	ldr	r1, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a44      	ldr	r2, [pc, #272]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4a41      	ldr	r2, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fc54 	bl	80015cc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe fc50 	bl	80015cc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e06e      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3a:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x530>
 8002d46:	e066      	b.n	8002e16 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d48:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a31      	ldr	r2, [pc, #196]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fc2c 	bl	80015cc <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fc28 	bl	80015cc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e046      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x580>
 8002d96:	e03e      	b.n	8002e16 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e039      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d12c      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d123      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11b      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d113      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	3b01      	subs	r3, #1
 8002df8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	019f800c 	.word	0x019f800c

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e11e      	b.n	800307e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b91      	ldr	r3, [pc, #580]	; (8003088 <HAL_RCC_ClockConfig+0x260>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d910      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b8e      	ldr	r3, [pc, #568]	; (8003088 <HAL_RCC_ClockConfig+0x260>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 020f 	bic.w	r2, r3, #15
 8002e56:	498c      	ldr	r1, [pc, #560]	; (8003088 <HAL_RCC_ClockConfig+0x260>)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b8a      	ldr	r3, [pc, #552]	; (8003088 <HAL_RCC_ClockConfig+0x260>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e106      	b.n	800307e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d073      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d129      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e84:	4b81      	ldr	r3, [pc, #516]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0f4      	b.n	800307e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e94:	f000 f972 	bl	800317c <RCC_GetSysClockFreqFromPLLSource>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4a7c      	ldr	r2, [pc, #496]	; (8003090 <HAL_RCC_ClockConfig+0x268>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d93f      	bls.n	8002f22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ea2:	4b7a      	ldr	r3, [pc, #488]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d033      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d12f      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ec2:	4b72      	ldr	r3, [pc, #456]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eca:	4a70      	ldr	r2, [pc, #448]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e024      	b.n	8002f22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0c6      	b.n	800307e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef0:	4b66      	ldr	r3, [pc, #408]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0be      	b.n	800307e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f00:	f000 f8ce 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4a61      	ldr	r2, [pc, #388]	; (8003090 <HAL_RCC_ClockConfig+0x268>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d909      	bls.n	8002f22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f0e:	4b5f      	ldr	r3, [pc, #380]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f16:	4a5d      	ldr	r2, [pc, #372]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f22:	4b5a      	ldr	r3, [pc, #360]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 0203 	bic.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4957      	ldr	r1, [pc, #348]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fe fb4a 	bl	80015cc <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3c:	f7fe fb46 	bl	80015cc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e095      	b.n	800307e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	4b4e      	ldr	r3, [pc, #312]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 020c 	and.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1eb      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d023      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f7c:	4b43      	ldr	r3, [pc, #268]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a42      	ldr	r2, [pc, #264]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f94:	4b3d      	ldr	r3, [pc, #244]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f9c:	4a3b      	ldr	r2, [pc, #236]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002f9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4936      	ldr	r1, [pc, #216]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d105      	bne.n	8002fca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fbe:	4b33      	ldr	r3, [pc, #204]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4a32      	ldr	r2, [pc, #200]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8002fc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_RCC_ClockConfig+0x260>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d21d      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd8:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_RCC_ClockConfig+0x260>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 020f 	bic.w	r2, r3, #15
 8002fe0:	4929      	ldr	r1, [pc, #164]	; (8003088 <HAL_RCC_ClockConfig+0x260>)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe faf0 	bl	80015cc <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe faec 	bl	80015cc <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e03b      	b.n	800307e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_ClockConfig+0x260>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d1ed      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4917      	ldr	r1, [pc, #92]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	490f      	ldr	r1, [pc, #60]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003052:	f000 f825 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 8003056:	4602      	mov	r2, r0
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_RCC_ClockConfig+0x264>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	490c      	ldr	r1, [pc, #48]	; (8003094 <HAL_RCC_ClockConfig+0x26c>)
 8003064:	5ccb      	ldrb	r3, [r1, r3]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x270>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_ClockConfig+0x274>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fa5c 	bl	8001534 <HAL_InitTick>
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40022000 	.word	0x40022000
 800308c:	40021000 	.word	0x40021000
 8003090:	04c4b400 	.word	0x04c4b400
 8003094:	08004ce8 	.word	0x08004ce8
 8003098:	20000000 	.word	0x20000000
 800309c:	20000004 	.word	0x20000004

080030a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030a6:	4b2c      	ldr	r3, [pc, #176]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_GetSysClockFreq+0xbc>)
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	e047      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030b8:	4b27      	ldr	r3, [pc, #156]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d102      	bne.n	80030ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	e03e      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d136      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030f4:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030fe:	68d2      	ldr	r2, [r2, #12]
 8003100:	0a12      	lsrs	r2, r2, #8
 8003102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	617b      	str	r3, [r7, #20]
      break;
 800310c:	e00c      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800310e:	4a13      	ldr	r2, [pc, #76]	; (800315c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	4a10      	ldr	r2, [pc, #64]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	0a12      	lsrs	r2, r2, #8
 800311c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003120:	fb02 f303 	mul.w	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
      break;
 8003126:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0e5b      	lsrs	r3, r3, #25
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	3301      	adds	r3, #1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e001      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003148:	693b      	ldr	r3, [r7, #16]
}
 800314a:	4618      	mov	r0, r3
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	00f42400 	.word	0x00f42400
 8003160:	007a1200 	.word	0x007a1200

08003164 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_RCC_GetHCLKFreq+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000000 	.word	0x20000000

0800317c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d10c      	bne.n	80031ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031a0:	4a17      	ldr	r2, [pc, #92]	; (8003200 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	4a14      	ldr	r2, [pc, #80]	; (80031fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031aa:	68d2      	ldr	r2, [r2, #12]
 80031ac:	0a12      	lsrs	r2, r2, #8
 80031ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	617b      	str	r3, [r7, #20]
    break;
 80031b8:	e00c      	b.n	80031d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	0a12      	lsrs	r2, r2, #8
 80031c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]
    break;
 80031d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	0e5b      	lsrs	r3, r3, #25
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	3301      	adds	r3, #1
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031ee:	687b      	ldr	r3, [r7, #4]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40021000 	.word	0x40021000
 8003200:	007a1200 	.word	0x007a1200
 8003204:	00f42400 	.word	0x00f42400

08003208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e049      	b.n	80032ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe f8c6 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f000 f9bc 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d001      	beq.n	80032d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e04c      	b.n	800336a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <HAL_TIM_Base_Start+0xc0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d022      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d01d      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_TIM_Base_Start+0xc4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d018      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a21      	ldr	r2, [pc, #132]	; (8003380 <HAL_TIM_Base_Start+0xc8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <HAL_TIM_Base_Start+0xcc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00e      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_TIM_Base_Start+0xd0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1c      	ldr	r2, [pc, #112]	; (800338c <HAL_TIM_Base_Start+0xd4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_TIM_Base_Start+0xd8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d115      	bne.n	8003354 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_TIM_Base_Start+0xdc>)
 8003330:	4013      	ands	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b06      	cmp	r3, #6
 8003338:	d015      	beq.n	8003366 <HAL_TIM_Base_Start+0xae>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d011      	beq.n	8003366 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	e008      	b.n	8003366 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e000      	b.n	8003368 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800
 8003384:	40000c00 	.word	0x40000c00
 8003388:	40013400 	.word	0x40013400
 800338c:	40014000 	.word	0x40014000
 8003390:	40015000 	.word	0x40015000
 8003394:	00010007 	.word	0x00010007

08003398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_TIM_ConfigClockSource+0x1c>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e0f6      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x20a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80033d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6f      	ldr	r2, [pc, #444]	; (80035ac <HAL_TIM_ConfigClockSource+0x214>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	f000 80c1 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 80033f4:	4a6d      	ldr	r2, [pc, #436]	; (80035ac <HAL_TIM_ConfigClockSource+0x214>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	f200 80c6 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 80033fc:	4a6c      	ldr	r2, [pc, #432]	; (80035b0 <HAL_TIM_ConfigClockSource+0x218>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f000 80b9 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 8003404:	4a6a      	ldr	r2, [pc, #424]	; (80035b0 <HAL_TIM_ConfigClockSource+0x218>)
 8003406:	4293      	cmp	r3, r2
 8003408:	f200 80be 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 800340c:	4a69      	ldr	r2, [pc, #420]	; (80035b4 <HAL_TIM_ConfigClockSource+0x21c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f000 80b1 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 8003414:	4a67      	ldr	r2, [pc, #412]	; (80035b4 <HAL_TIM_ConfigClockSource+0x21c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	f200 80b6 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 800341c:	4a66      	ldr	r2, [pc, #408]	; (80035b8 <HAL_TIM_ConfigClockSource+0x220>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f000 80a9 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 8003424:	4a64      	ldr	r2, [pc, #400]	; (80035b8 <HAL_TIM_ConfigClockSource+0x220>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f200 80ae 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 800342c:	4a63      	ldr	r2, [pc, #396]	; (80035bc <HAL_TIM_ConfigClockSource+0x224>)
 800342e:	4293      	cmp	r3, r2
 8003430:	f000 80a1 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 8003434:	4a61      	ldr	r2, [pc, #388]	; (80035bc <HAL_TIM_ConfigClockSource+0x224>)
 8003436:	4293      	cmp	r3, r2
 8003438:	f200 80a6 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 800343c:	4a60      	ldr	r2, [pc, #384]	; (80035c0 <HAL_TIM_ConfigClockSource+0x228>)
 800343e:	4293      	cmp	r3, r2
 8003440:	f000 8099 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 8003444:	4a5e      	ldr	r2, [pc, #376]	; (80035c0 <HAL_TIM_ConfigClockSource+0x228>)
 8003446:	4293      	cmp	r3, r2
 8003448:	f200 809e 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 800344c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003450:	f000 8091 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 8003454:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003458:	f200 8096 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 800345c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003460:	f000 8089 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 8003464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003468:	f200 808e 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 800346c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003470:	d03e      	beq.n	80034f0 <HAL_TIM_ConfigClockSource+0x158>
 8003472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003476:	f200 8087 	bhi.w	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 800347a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347e:	f000 8086 	beq.w	800358e <HAL_TIM_ConfigClockSource+0x1f6>
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d87f      	bhi.n	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 8003488:	2b70      	cmp	r3, #112	; 0x70
 800348a:	d01a      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x12a>
 800348c:	2b70      	cmp	r3, #112	; 0x70
 800348e:	d87b      	bhi.n	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 8003490:	2b60      	cmp	r3, #96	; 0x60
 8003492:	d050      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x19e>
 8003494:	2b60      	cmp	r3, #96	; 0x60
 8003496:	d877      	bhi.n	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 8003498:	2b50      	cmp	r3, #80	; 0x50
 800349a:	d03c      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x17e>
 800349c:	2b50      	cmp	r3, #80	; 0x50
 800349e:	d873      	bhi.n	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d058      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x1be>
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d86f      	bhi.n	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 80034a8:	2b30      	cmp	r3, #48	; 0x30
 80034aa:	d064      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 80034ac:	2b30      	cmp	r3, #48	; 0x30
 80034ae:	d86b      	bhi.n	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d060      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d867      	bhi.n	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d05c      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d05a      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x1de>
 80034c0:	e062      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6899      	ldr	r1, [r3, #8]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f000 f99b 	bl	800380c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	609a      	str	r2, [r3, #8]
      break;
 80034ee:	e04f      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6899      	ldr	r1, [r3, #8]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f000 f984 	bl	800380c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003512:	609a      	str	r2, [r3, #8]
      break;
 8003514:	e03c      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	461a      	mov	r2, r3
 8003524:	f000 f8f6 	bl	8003714 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2150      	movs	r1, #80	; 0x50
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f94f 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 8003534:	e02c      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	461a      	mov	r2, r3
 8003544:	f000 f915 	bl	8003772 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2160      	movs	r1, #96	; 0x60
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f93f 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 8003554:	e01c      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	461a      	mov	r2, r3
 8003564:	f000 f8d6 	bl	8003714 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f92f 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 8003574:	e00c      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4619      	mov	r1, r3
 8003580:	4610      	mov	r0, r2
 8003582:	f000 f926 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 8003586:	e003      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e000      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800358e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	00100070 	.word	0x00100070
 80035b0:	00100060 	.word	0x00100060
 80035b4:	00100050 	.word	0x00100050
 80035b8:	00100040 	.word	0x00100040
 80035bc:	00100030 	.word	0x00100030
 80035c0:	00100020 	.word	0x00100020

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a46      	ldr	r2, [pc, #280]	; (80036f0 <TIM_Base_SetConfig+0x12c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d017      	beq.n	800360c <TIM_Base_SetConfig+0x48>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d013      	beq.n	800360c <TIM_Base_SetConfig+0x48>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a43      	ldr	r2, [pc, #268]	; (80036f4 <TIM_Base_SetConfig+0x130>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00f      	beq.n	800360c <TIM_Base_SetConfig+0x48>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a42      	ldr	r2, [pc, #264]	; (80036f8 <TIM_Base_SetConfig+0x134>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0x48>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a41      	ldr	r2, [pc, #260]	; (80036fc <TIM_Base_SetConfig+0x138>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x48>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a40      	ldr	r2, [pc, #256]	; (8003700 <TIM_Base_SetConfig+0x13c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x48>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3f      	ldr	r2, [pc, #252]	; (8003704 <TIM_Base_SetConfig+0x140>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a33      	ldr	r2, [pc, #204]	; (80036f0 <TIM_Base_SetConfig+0x12c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d023      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d01f      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <TIM_Base_SetConfig+0x130>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01b      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2f      	ldr	r2, [pc, #188]	; (80036f8 <TIM_Base_SetConfig+0x134>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d017      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <TIM_Base_SetConfig+0x138>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <TIM_Base_SetConfig+0x13c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00f      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <TIM_Base_SetConfig+0x144>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00b      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <TIM_Base_SetConfig+0x148>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <TIM_Base_SetConfig+0x14c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_Base_SetConfig+0xaa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a26      	ldr	r2, [pc, #152]	; (8003704 <TIM_Base_SetConfig+0x140>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d108      	bne.n	8003680 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <TIM_Base_SetConfig+0x12c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <TIM_Base_SetConfig+0x110>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a14      	ldr	r2, [pc, #80]	; (8003700 <TIM_Base_SetConfig+0x13c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00f      	beq.n	80036d4 <TIM_Base_SetConfig+0x110>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a14      	ldr	r2, [pc, #80]	; (8003708 <TIM_Base_SetConfig+0x144>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <TIM_Base_SetConfig+0x110>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <TIM_Base_SetConfig+0x148>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_Base_SetConfig+0x110>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <TIM_Base_SetConfig+0x14c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0x110>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <TIM_Base_SetConfig+0x140>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40013400 	.word	0x40013400
 8003704:	40015000 	.word	0x40015000
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800

08003714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0201 	bic.w	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 030a 	bic.w	r3, r3, #10
 8003750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003772:	b480      	push	{r7}
 8003774:	b087      	sub	sp, #28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0210 	bic.w	r2, r3, #16
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800379c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f043 0307 	orr.w	r3, r3, #7
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	021a      	lsls	r2, r3, #8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	431a      	orrs	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e074      	b.n	800394e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a34      	ldr	r2, [pc, #208]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a33      	ldr	r2, [pc, #204]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a31      	ldr	r2, [pc, #196]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d108      	bne.n	80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a21      	ldr	r2, [pc, #132]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d01d      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a15      	ldr	r2, [pc, #84]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a11      	ldr	r2, [pc, #68]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10c      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4313      	orrs	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40015000 	.word	0x40015000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40000c00 	.word	0x40000c00
 8003974:	40014000 	.word	0x40014000

08003978 <memset>:
 8003978:	4402      	add	r2, r0
 800397a:	4603      	mov	r3, r0
 800397c:	4293      	cmp	r3, r2
 800397e:	d100      	bne.n	8003982 <memset+0xa>
 8003980:	4770      	bx	lr
 8003982:	f803 1b01 	strb.w	r1, [r3], #1
 8003986:	e7f9      	b.n	800397c <memset+0x4>

08003988 <__errno>:
 8003988:	4b01      	ldr	r3, [pc, #4]	; (8003990 <__errno+0x8>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000058 	.word	0x20000058

08003994 <__libc_init_array>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	4d0d      	ldr	r5, [pc, #52]	; (80039cc <__libc_init_array+0x38>)
 8003998:	4c0d      	ldr	r4, [pc, #52]	; (80039d0 <__libc_init_array+0x3c>)
 800399a:	1b64      	subs	r4, r4, r5
 800399c:	10a4      	asrs	r4, r4, #2
 800399e:	2600      	movs	r6, #0
 80039a0:	42a6      	cmp	r6, r4
 80039a2:	d109      	bne.n	80039b8 <__libc_init_array+0x24>
 80039a4:	4d0b      	ldr	r5, [pc, #44]	; (80039d4 <__libc_init_array+0x40>)
 80039a6:	4c0c      	ldr	r4, [pc, #48]	; (80039d8 <__libc_init_array+0x44>)
 80039a8:	f001 f992 	bl	8004cd0 <_init>
 80039ac:	1b64      	subs	r4, r4, r5
 80039ae:	10a4      	asrs	r4, r4, #2
 80039b0:	2600      	movs	r6, #0
 80039b2:	42a6      	cmp	r6, r4
 80039b4:	d105      	bne.n	80039c2 <__libc_init_array+0x2e>
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039bc:	4798      	blx	r3
 80039be:	3601      	adds	r6, #1
 80039c0:	e7ee      	b.n	80039a0 <__libc_init_array+0xc>
 80039c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c6:	4798      	blx	r3
 80039c8:	3601      	adds	r6, #1
 80039ca:	e7f2      	b.n	80039b2 <__libc_init_array+0x1e>
 80039cc:	08004ee0 	.word	0x08004ee0
 80039d0:	08004ee0 	.word	0x08004ee0
 80039d4:	08004ee0 	.word	0x08004ee0
 80039d8:	08004ee4 	.word	0x08004ee4

080039dc <fmod>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	ed2d 8b02 	vpush	{d8}
 80039e2:	ec57 6b10 	vmov	r6, r7, d0
 80039e6:	ec55 4b11 	vmov	r4, r5, d1
 80039ea:	f000 fa03 	bl	8003df4 <__ieee754_fmod>
 80039ee:	4622      	mov	r2, r4
 80039f0:	462b      	mov	r3, r5
 80039f2:	4630      	mov	r0, r6
 80039f4:	4639      	mov	r1, r7
 80039f6:	eeb0 8a40 	vmov.f32	s16, s0
 80039fa:	eef0 8a60 	vmov.f32	s17, s1
 80039fe:	f7fd f861 	bl	8000ac4 <__aeabi_dcmpun>
 8003a02:	b990      	cbnz	r0, 8003a2a <fmod+0x4e>
 8003a04:	2200      	movs	r2, #0
 8003a06:	2300      	movs	r3, #0
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fd f828 	bl	8000a60 <__aeabi_dcmpeq>
 8003a10:	b158      	cbz	r0, 8003a2a <fmod+0x4e>
 8003a12:	f7ff ffb9 	bl	8003988 <__errno>
 8003a16:	2321      	movs	r3, #33	; 0x21
 8003a18:	6003      	str	r3, [r0, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	f7fc fedf 	bl	80007e4 <__aeabi_ddiv>
 8003a26:	ec41 0b18 	vmov	d8, r0, r1
 8003a2a:	eeb0 0a48 	vmov.f32	s0, s16
 8003a2e:	eef0 0a68 	vmov.f32	s1, s17
 8003a32:	ecbd 8b02 	vpop	{d8}
 8003a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a38 <sin>:
 8003a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a3a:	ec53 2b10 	vmov	r2, r3, d0
 8003a3e:	4828      	ldr	r0, [pc, #160]	; (8003ae0 <sin+0xa8>)
 8003a40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a44:	4281      	cmp	r1, r0
 8003a46:	dc07      	bgt.n	8003a58 <sin+0x20>
 8003a48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003ad8 <sin+0xa0>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	b005      	add	sp, #20
 8003a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a54:	f000 b910 	b.w	8003c78 <__kernel_sin>
 8003a58:	4822      	ldr	r0, [pc, #136]	; (8003ae4 <sin+0xac>)
 8003a5a:	4281      	cmp	r1, r0
 8003a5c:	dd09      	ble.n	8003a72 <sin+0x3a>
 8003a5e:	ee10 0a10 	vmov	r0, s0
 8003a62:	4619      	mov	r1, r3
 8003a64:	f7fc fbdc 	bl	8000220 <__aeabi_dsub>
 8003a68:	ec41 0b10 	vmov	d0, r0, r1
 8003a6c:	b005      	add	sp, #20
 8003a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a72:	4668      	mov	r0, sp
 8003a74:	f000 facc 	bl	8004010 <__ieee754_rem_pio2>
 8003a78:	f000 0003 	and.w	r0, r0, #3
 8003a7c:	2801      	cmp	r0, #1
 8003a7e:	d00c      	beq.n	8003a9a <sin+0x62>
 8003a80:	2802      	cmp	r0, #2
 8003a82:	d011      	beq.n	8003aa8 <sin+0x70>
 8003a84:	b9f0      	cbnz	r0, 8003ac4 <sin+0x8c>
 8003a86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a8a:	ed9d 0b00 	vldr	d0, [sp]
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f000 f8f2 	bl	8003c78 <__kernel_sin>
 8003a94:	ec51 0b10 	vmov	r0, r1, d0
 8003a98:	e7e6      	b.n	8003a68 <sin+0x30>
 8003a9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a9e:	ed9d 0b00 	vldr	d0, [sp]
 8003aa2:	f000 f821 	bl	8003ae8 <__kernel_cos>
 8003aa6:	e7f5      	b.n	8003a94 <sin+0x5c>
 8003aa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003aac:	ed9d 0b00 	vldr	d0, [sp]
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f000 f8e1 	bl	8003c78 <__kernel_sin>
 8003ab6:	ec53 2b10 	vmov	r2, r3, d0
 8003aba:	ee10 0a10 	vmov	r0, s0
 8003abe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003ac2:	e7d1      	b.n	8003a68 <sin+0x30>
 8003ac4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ac8:	ed9d 0b00 	vldr	d0, [sp]
 8003acc:	f000 f80c 	bl	8003ae8 <__kernel_cos>
 8003ad0:	e7f1      	b.n	8003ab6 <sin+0x7e>
 8003ad2:	bf00      	nop
 8003ad4:	f3af 8000 	nop.w
	...
 8003ae0:	3fe921fb 	.word	0x3fe921fb
 8003ae4:	7fefffff 	.word	0x7fefffff

08003ae8 <__kernel_cos>:
 8003ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	ec57 6b10 	vmov	r6, r7, d0
 8003af0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003af4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003af8:	ed8d 1b00 	vstr	d1, [sp]
 8003afc:	da07      	bge.n	8003b0e <__kernel_cos+0x26>
 8003afe:	ee10 0a10 	vmov	r0, s0
 8003b02:	4639      	mov	r1, r7
 8003b04:	f7fc fff4 	bl	8000af0 <__aeabi_d2iz>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	f000 8088 	beq.w	8003c1e <__kernel_cos+0x136>
 8003b0e:	4632      	mov	r2, r6
 8003b10:	463b      	mov	r3, r7
 8003b12:	4630      	mov	r0, r6
 8003b14:	4639      	mov	r1, r7
 8003b16:	f7fc fd3b 	bl	8000590 <__aeabi_dmul>
 8003b1a:	4b51      	ldr	r3, [pc, #324]	; (8003c60 <__kernel_cos+0x178>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4604      	mov	r4, r0
 8003b20:	460d      	mov	r5, r1
 8003b22:	f7fc fd35 	bl	8000590 <__aeabi_dmul>
 8003b26:	a340      	add	r3, pc, #256	; (adr r3, 8003c28 <__kernel_cos+0x140>)
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	4682      	mov	sl, r0
 8003b2e:	468b      	mov	fp, r1
 8003b30:	4620      	mov	r0, r4
 8003b32:	4629      	mov	r1, r5
 8003b34:	f7fc fd2c 	bl	8000590 <__aeabi_dmul>
 8003b38:	a33d      	add	r3, pc, #244	; (adr r3, 8003c30 <__kernel_cos+0x148>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f7fc fb71 	bl	8000224 <__adddf3>
 8003b42:	4622      	mov	r2, r4
 8003b44:	462b      	mov	r3, r5
 8003b46:	f7fc fd23 	bl	8000590 <__aeabi_dmul>
 8003b4a:	a33b      	add	r3, pc, #236	; (adr r3, 8003c38 <__kernel_cos+0x150>)
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f7fc fb66 	bl	8000220 <__aeabi_dsub>
 8003b54:	4622      	mov	r2, r4
 8003b56:	462b      	mov	r3, r5
 8003b58:	f7fc fd1a 	bl	8000590 <__aeabi_dmul>
 8003b5c:	a338      	add	r3, pc, #224	; (adr r3, 8003c40 <__kernel_cos+0x158>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fb5f 	bl	8000224 <__adddf3>
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f7fc fd11 	bl	8000590 <__aeabi_dmul>
 8003b6e:	a336      	add	r3, pc, #216	; (adr r3, 8003c48 <__kernel_cos+0x160>)
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f7fc fb54 	bl	8000220 <__aeabi_dsub>
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	f7fc fd08 	bl	8000590 <__aeabi_dmul>
 8003b80:	a333      	add	r3, pc, #204	; (adr r3, 8003c50 <__kernel_cos+0x168>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f7fc fb4d 	bl	8000224 <__adddf3>
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	f7fc fcff 	bl	8000590 <__aeabi_dmul>
 8003b92:	4622      	mov	r2, r4
 8003b94:	462b      	mov	r3, r5
 8003b96:	f7fc fcfb 	bl	8000590 <__aeabi_dmul>
 8003b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	460d      	mov	r5, r1
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	4639      	mov	r1, r7
 8003ba6:	f7fc fcf3 	bl	8000590 <__aeabi_dmul>
 8003baa:	460b      	mov	r3, r1
 8003bac:	4602      	mov	r2, r0
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7fc fb35 	bl	8000220 <__aeabi_dsub>
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <__kernel_cos+0x17c>)
 8003bb8:	4598      	cmp	r8, r3
 8003bba:	4606      	mov	r6, r0
 8003bbc:	460f      	mov	r7, r1
 8003bbe:	dc10      	bgt.n	8003be2 <__kernel_cos+0xfa>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4650      	mov	r0, sl
 8003bc6:	4659      	mov	r1, fp
 8003bc8:	f7fc fb2a 	bl	8000220 <__aeabi_dsub>
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4926      	ldr	r1, [pc, #152]	; (8003c68 <__kernel_cos+0x180>)
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7fc fb24 	bl	8000220 <__aeabi_dsub>
 8003bd8:	ec41 0b10 	vmov	d0, r0, r1
 8003bdc:	b003      	add	sp, #12
 8003bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be2:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <__kernel_cos+0x184>)
 8003be4:	4920      	ldr	r1, [pc, #128]	; (8003c68 <__kernel_cos+0x180>)
 8003be6:	4598      	cmp	r8, r3
 8003be8:	bfcc      	ite	gt
 8003bea:	4d21      	ldrgt	r5, [pc, #132]	; (8003c70 <__kernel_cos+0x188>)
 8003bec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003bf0:	2400      	movs	r4, #0
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fc fb12 	bl	8000220 <__aeabi_dsub>
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	4680      	mov	r8, r0
 8003c00:	4689      	mov	r9, r1
 8003c02:	462b      	mov	r3, r5
 8003c04:	4650      	mov	r0, sl
 8003c06:	4659      	mov	r1, fp
 8003c08:	f7fc fb0a 	bl	8000220 <__aeabi_dsub>
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	463b      	mov	r3, r7
 8003c10:	f7fc fb06 	bl	8000220 <__aeabi_dsub>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4640      	mov	r0, r8
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	e7da      	b.n	8003bd4 <__kernel_cos+0xec>
 8003c1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003c58 <__kernel_cos+0x170>
 8003c22:	e7db      	b.n	8003bdc <__kernel_cos+0xf4>
 8003c24:	f3af 8000 	nop.w
 8003c28:	be8838d4 	.word	0xbe8838d4
 8003c2c:	bda8fae9 	.word	0xbda8fae9
 8003c30:	bdb4b1c4 	.word	0xbdb4b1c4
 8003c34:	3e21ee9e 	.word	0x3e21ee9e
 8003c38:	809c52ad 	.word	0x809c52ad
 8003c3c:	3e927e4f 	.word	0x3e927e4f
 8003c40:	19cb1590 	.word	0x19cb1590
 8003c44:	3efa01a0 	.word	0x3efa01a0
 8003c48:	16c15177 	.word	0x16c15177
 8003c4c:	3f56c16c 	.word	0x3f56c16c
 8003c50:	5555554c 	.word	0x5555554c
 8003c54:	3fa55555 	.word	0x3fa55555
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	3ff00000 	.word	0x3ff00000
 8003c60:	3fe00000 	.word	0x3fe00000
 8003c64:	3fd33332 	.word	0x3fd33332
 8003c68:	3ff00000 	.word	0x3ff00000
 8003c6c:	3fe90000 	.word	0x3fe90000
 8003c70:	3fd20000 	.word	0x3fd20000
 8003c74:	00000000 	.word	0x00000000

08003c78 <__kernel_sin>:
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	ed2d 8b04 	vpush	{d8-d9}
 8003c80:	eeb0 8a41 	vmov.f32	s16, s2
 8003c84:	eef0 8a61 	vmov.f32	s17, s3
 8003c88:	ec55 4b10 	vmov	r4, r5, d0
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003c92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003c96:	9001      	str	r0, [sp, #4]
 8003c98:	da06      	bge.n	8003ca8 <__kernel_sin+0x30>
 8003c9a:	ee10 0a10 	vmov	r0, s0
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f7fc ff26 	bl	8000af0 <__aeabi_d2iz>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d051      	beq.n	8003d4c <__kernel_sin+0xd4>
 8003ca8:	4622      	mov	r2, r4
 8003caa:	462b      	mov	r3, r5
 8003cac:	4620      	mov	r0, r4
 8003cae:	4629      	mov	r1, r5
 8003cb0:	f7fc fc6e 	bl	8000590 <__aeabi_dmul>
 8003cb4:	4682      	mov	sl, r0
 8003cb6:	468b      	mov	fp, r1
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fc66 	bl	8000590 <__aeabi_dmul>
 8003cc4:	a341      	add	r3, pc, #260	; (adr r3, 8003dcc <__kernel_sin+0x154>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	4680      	mov	r8, r0
 8003ccc:	4689      	mov	r9, r1
 8003cce:	4650      	mov	r0, sl
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	f7fc fc5d 	bl	8000590 <__aeabi_dmul>
 8003cd6:	a33f      	add	r3, pc, #252	; (adr r3, 8003dd4 <__kernel_sin+0x15c>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc faa0 	bl	8000220 <__aeabi_dsub>
 8003ce0:	4652      	mov	r2, sl
 8003ce2:	465b      	mov	r3, fp
 8003ce4:	f7fc fc54 	bl	8000590 <__aeabi_dmul>
 8003ce8:	a33c      	add	r3, pc, #240	; (adr r3, 8003ddc <__kernel_sin+0x164>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fa99 	bl	8000224 <__adddf3>
 8003cf2:	4652      	mov	r2, sl
 8003cf4:	465b      	mov	r3, fp
 8003cf6:	f7fc fc4b 	bl	8000590 <__aeabi_dmul>
 8003cfa:	a33a      	add	r3, pc, #232	; (adr r3, 8003de4 <__kernel_sin+0x16c>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc fa8e 	bl	8000220 <__aeabi_dsub>
 8003d04:	4652      	mov	r2, sl
 8003d06:	465b      	mov	r3, fp
 8003d08:	f7fc fc42 	bl	8000590 <__aeabi_dmul>
 8003d0c:	a337      	add	r3, pc, #220	; (adr r3, 8003dec <__kernel_sin+0x174>)
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f7fc fa87 	bl	8000224 <__adddf3>
 8003d16:	9b01      	ldr	r3, [sp, #4]
 8003d18:	4606      	mov	r6, r0
 8003d1a:	460f      	mov	r7, r1
 8003d1c:	b9eb      	cbnz	r3, 8003d5a <__kernel_sin+0xe2>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4650      	mov	r0, sl
 8003d24:	4659      	mov	r1, fp
 8003d26:	f7fc fc33 	bl	8000590 <__aeabi_dmul>
 8003d2a:	a325      	add	r3, pc, #148	; (adr r3, 8003dc0 <__kernel_sin+0x148>)
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f7fc fa76 	bl	8000220 <__aeabi_dsub>
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	f7fc fc2a 	bl	8000590 <__aeabi_dmul>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4620      	mov	r0, r4
 8003d42:	4629      	mov	r1, r5
 8003d44:	f7fc fa6e 	bl	8000224 <__adddf3>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	460d      	mov	r5, r1
 8003d4c:	ec45 4b10 	vmov	d0, r4, r5
 8003d50:	b003      	add	sp, #12
 8003d52:	ecbd 8b04 	vpop	{d8-d9}
 8003d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <__kernel_sin+0x150>)
 8003d5c:	ec51 0b18 	vmov	r0, r1, d8
 8003d60:	2200      	movs	r2, #0
 8003d62:	f7fc fc15 	bl	8000590 <__aeabi_dmul>
 8003d66:	4632      	mov	r2, r6
 8003d68:	ec41 0b19 	vmov	d9, r0, r1
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	4640      	mov	r0, r8
 8003d70:	4649      	mov	r1, r9
 8003d72:	f7fc fc0d 	bl	8000590 <__aeabi_dmul>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	ec51 0b19 	vmov	r0, r1, d9
 8003d7e:	f7fc fa4f 	bl	8000220 <__aeabi_dsub>
 8003d82:	4652      	mov	r2, sl
 8003d84:	465b      	mov	r3, fp
 8003d86:	f7fc fc03 	bl	8000590 <__aeabi_dmul>
 8003d8a:	ec53 2b18 	vmov	r2, r3, d8
 8003d8e:	f7fc fa47 	bl	8000220 <__aeabi_dsub>
 8003d92:	a30b      	add	r3, pc, #44	; (adr r3, 8003dc0 <__kernel_sin+0x148>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	4606      	mov	r6, r0
 8003d9a:	460f      	mov	r7, r1
 8003d9c:	4640      	mov	r0, r8
 8003d9e:	4649      	mov	r1, r9
 8003da0:	f7fc fbf6 	bl	8000590 <__aeabi_dmul>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4630      	mov	r0, r6
 8003daa:	4639      	mov	r1, r7
 8003dac:	f7fc fa3a 	bl	8000224 <__adddf3>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4620      	mov	r0, r4
 8003db6:	4629      	mov	r1, r5
 8003db8:	f7fc fa32 	bl	8000220 <__aeabi_dsub>
 8003dbc:	e7c4      	b.n	8003d48 <__kernel_sin+0xd0>
 8003dbe:	bf00      	nop
 8003dc0:	55555549 	.word	0x55555549
 8003dc4:	3fc55555 	.word	0x3fc55555
 8003dc8:	3fe00000 	.word	0x3fe00000
 8003dcc:	5acfd57c 	.word	0x5acfd57c
 8003dd0:	3de5d93a 	.word	0x3de5d93a
 8003dd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8003dd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8003ddc:	57b1fe7d 	.word	0x57b1fe7d
 8003de0:	3ec71de3 	.word	0x3ec71de3
 8003de4:	19c161d5 	.word	0x19c161d5
 8003de8:	3f2a01a0 	.word	0x3f2a01a0
 8003dec:	1110f8a6 	.word	0x1110f8a6
 8003df0:	3f811111 	.word	0x3f811111

08003df4 <__ieee754_fmod>:
 8003df4:	ec53 2b11 	vmov	r2, r3, d1
 8003df8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8003dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	ea5c 0402 	orrs.w	r4, ip, r2
 8003e04:	ec51 0b10 	vmov	r0, r1, d0
 8003e08:	ee11 7a10 	vmov	r7, s2
 8003e0c:	ee11 ea10 	vmov	lr, s2
 8003e10:	461e      	mov	r6, r3
 8003e12:	d00c      	beq.n	8003e2e <__ieee754_fmod+0x3a>
 8003e14:	4c78      	ldr	r4, [pc, #480]	; (8003ff8 <__ieee754_fmod+0x204>)
 8003e16:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8003e1a:	45a0      	cmp	r8, r4
 8003e1c:	4689      	mov	r9, r1
 8003e1e:	dc06      	bgt.n	8003e2e <__ieee754_fmod+0x3a>
 8003e20:	4254      	negs	r4, r2
 8003e22:	4d76      	ldr	r5, [pc, #472]	; (8003ffc <__ieee754_fmod+0x208>)
 8003e24:	4314      	orrs	r4, r2
 8003e26:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8003e2a:	42ac      	cmp	r4, r5
 8003e2c:	d909      	bls.n	8003e42 <__ieee754_fmod+0x4e>
 8003e2e:	f7fc fbaf 	bl	8000590 <__aeabi_dmul>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	f7fc fcd5 	bl	80007e4 <__aeabi_ddiv>
 8003e3a:	ec41 0b10 	vmov	d0, r0, r1
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e42:	45e0      	cmp	r8, ip
 8003e44:	ee10 aa10 	vmov	sl, s0
 8003e48:	ee10 4a10 	vmov	r4, s0
 8003e4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003e50:	dc09      	bgt.n	8003e66 <__ieee754_fmod+0x72>
 8003e52:	dbf2      	blt.n	8003e3a <__ieee754_fmod+0x46>
 8003e54:	4290      	cmp	r0, r2
 8003e56:	d3f0      	bcc.n	8003e3a <__ieee754_fmod+0x46>
 8003e58:	d105      	bne.n	8003e66 <__ieee754_fmod+0x72>
 8003e5a:	4b69      	ldr	r3, [pc, #420]	; (8004000 <__ieee754_fmod+0x20c>)
 8003e5c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8003e60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e64:	e7e9      	b.n	8003e3a <__ieee754_fmod+0x46>
 8003e66:	4a65      	ldr	r2, [pc, #404]	; (8003ffc <__ieee754_fmod+0x208>)
 8003e68:	ea19 0f02 	tst.w	r9, r2
 8003e6c:	d148      	bne.n	8003f00 <__ieee754_fmod+0x10c>
 8003e6e:	f1b8 0f00 	cmp.w	r8, #0
 8003e72:	d13d      	bne.n	8003ef0 <__ieee754_fmod+0xfc>
 8003e74:	4963      	ldr	r1, [pc, #396]	; (8004004 <__ieee754_fmod+0x210>)
 8003e76:	4653      	mov	r3, sl
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	dc36      	bgt.n	8003eea <__ieee754_fmod+0xf6>
 8003e7c:	4216      	tst	r6, r2
 8003e7e:	d14f      	bne.n	8003f20 <__ieee754_fmod+0x12c>
 8003e80:	f1bc 0f00 	cmp.w	ip, #0
 8003e84:	d144      	bne.n	8003f10 <__ieee754_fmod+0x11c>
 8003e86:	4a5f      	ldr	r2, [pc, #380]	; (8004004 <__ieee754_fmod+0x210>)
 8003e88:	463b      	mov	r3, r7
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	dc3d      	bgt.n	8003f0a <__ieee754_fmod+0x116>
 8003e8e:	485e      	ldr	r0, [pc, #376]	; (8004008 <__ieee754_fmod+0x214>)
 8003e90:	4281      	cmp	r1, r0
 8003e92:	db4a      	blt.n	8003f2a <__ieee754_fmod+0x136>
 8003e94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e9c:	485a      	ldr	r0, [pc, #360]	; (8004008 <__ieee754_fmod+0x214>)
 8003e9e:	4282      	cmp	r2, r0
 8003ea0:	db57      	blt.n	8003f52 <__ieee754_fmod+0x15e>
 8003ea2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8003ea6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8003eaa:	1a89      	subs	r1, r1, r2
 8003eac:	1b98      	subs	r0, r3, r6
 8003eae:	eba4 070e 	sub.w	r7, r4, lr
 8003eb2:	2900      	cmp	r1, #0
 8003eb4:	d162      	bne.n	8003f7c <__ieee754_fmod+0x188>
 8003eb6:	4574      	cmp	r4, lr
 8003eb8:	bf38      	it	cc
 8003eba:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	bfa4      	itt	ge
 8003ec2:	463c      	movge	r4, r7
 8003ec4:	4603      	movge	r3, r0
 8003ec6:	ea53 0104 	orrs.w	r1, r3, r4
 8003eca:	d0c6      	beq.n	8003e5a <__ieee754_fmod+0x66>
 8003ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed0:	db69      	blt.n	8003fa6 <__ieee754_fmod+0x1b2>
 8003ed2:	494d      	ldr	r1, [pc, #308]	; (8004008 <__ieee754_fmod+0x214>)
 8003ed4:	428a      	cmp	r2, r1
 8003ed6:	db6c      	blt.n	8003fb2 <__ieee754_fmod+0x1be>
 8003ed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003edc:	432b      	orrs	r3, r5
 8003ede:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003ee2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	e7a7      	b.n	8003e3a <__ieee754_fmod+0x46>
 8003eea:	3901      	subs	r1, #1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	e7c3      	b.n	8003e78 <__ieee754_fmod+0x84>
 8003ef0:	4945      	ldr	r1, [pc, #276]	; (8004008 <__ieee754_fmod+0x214>)
 8003ef2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	ddc0      	ble.n	8003e7c <__ieee754_fmod+0x88>
 8003efa:	3901      	subs	r1, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	e7fa      	b.n	8003ef6 <__ieee754_fmod+0x102>
 8003f00:	ea4f 5128 	mov.w	r1, r8, asr #20
 8003f04:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003f08:	e7b8      	b.n	8003e7c <__ieee754_fmod+0x88>
 8003f0a:	3a01      	subs	r2, #1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	e7bc      	b.n	8003e8a <__ieee754_fmod+0x96>
 8003f10:	4a3d      	ldr	r2, [pc, #244]	; (8004008 <__ieee754_fmod+0x214>)
 8003f12:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	ddb9      	ble.n	8003e8e <__ieee754_fmod+0x9a>
 8003f1a:	3a01      	subs	r2, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	e7fa      	b.n	8003f16 <__ieee754_fmod+0x122>
 8003f20:	ea4f 522c 	mov.w	r2, ip, asr #20
 8003f24:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003f28:	e7b1      	b.n	8003e8e <__ieee754_fmod+0x9a>
 8003f2a:	1a40      	subs	r0, r0, r1
 8003f2c:	281f      	cmp	r0, #31
 8003f2e:	dc0a      	bgt.n	8003f46 <__ieee754_fmod+0x152>
 8003f30:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8003f34:	fa08 f800 	lsl.w	r8, r8, r0
 8003f38:	fa2a f303 	lsr.w	r3, sl, r3
 8003f3c:	ea43 0308 	orr.w	r3, r3, r8
 8003f40:	fa0a f400 	lsl.w	r4, sl, r0
 8003f44:	e7aa      	b.n	8003e9c <__ieee754_fmod+0xa8>
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <__ieee754_fmod+0x218>)
 8003f48:	1a5b      	subs	r3, r3, r1
 8003f4a:	fa0a f303 	lsl.w	r3, sl, r3
 8003f4e:	2400      	movs	r4, #0
 8003f50:	e7a4      	b.n	8003e9c <__ieee754_fmod+0xa8>
 8003f52:	1a80      	subs	r0, r0, r2
 8003f54:	281f      	cmp	r0, #31
 8003f56:	dc0a      	bgt.n	8003f6e <__ieee754_fmod+0x17a>
 8003f58:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8003f5c:	fa0c fc00 	lsl.w	ip, ip, r0
 8003f60:	fa27 f606 	lsr.w	r6, r7, r6
 8003f64:	ea46 060c 	orr.w	r6, r6, ip
 8003f68:	fa07 fe00 	lsl.w	lr, r7, r0
 8003f6c:	e79d      	b.n	8003eaa <__ieee754_fmod+0xb6>
 8003f6e:	4e27      	ldr	r6, [pc, #156]	; (800400c <__ieee754_fmod+0x218>)
 8003f70:	1ab6      	subs	r6, r6, r2
 8003f72:	fa07 f606 	lsl.w	r6, r7, r6
 8003f76:	f04f 0e00 	mov.w	lr, #0
 8003f7a:	e796      	b.n	8003eaa <__ieee754_fmod+0xb6>
 8003f7c:	4574      	cmp	r4, lr
 8003f7e:	bf38      	it	cc
 8003f80:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8003f84:	2800      	cmp	r0, #0
 8003f86:	da05      	bge.n	8003f94 <__ieee754_fmod+0x1a0>
 8003f88:	0fe0      	lsrs	r0, r4, #31
 8003f8a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003f8e:	0064      	lsls	r4, r4, #1
 8003f90:	3901      	subs	r1, #1
 8003f92:	e78b      	b.n	8003eac <__ieee754_fmod+0xb8>
 8003f94:	ea50 0307 	orrs.w	r3, r0, r7
 8003f98:	f43f af5f 	beq.w	8003e5a <__ieee754_fmod+0x66>
 8003f9c:	0ffb      	lsrs	r3, r7, #31
 8003f9e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003fa2:	007c      	lsls	r4, r7, #1
 8003fa4:	e7f4      	b.n	8003f90 <__ieee754_fmod+0x19c>
 8003fa6:	0fe1      	lsrs	r1, r4, #31
 8003fa8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003fac:	0064      	lsls	r4, r4, #1
 8003fae:	3a01      	subs	r2, #1
 8003fb0:	e78c      	b.n	8003ecc <__ieee754_fmod+0xd8>
 8003fb2:	1a89      	subs	r1, r1, r2
 8003fb4:	2914      	cmp	r1, #20
 8003fb6:	dc0a      	bgt.n	8003fce <__ieee754_fmod+0x1da>
 8003fb8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8003fbc:	fa03 f202 	lsl.w	r2, r3, r2
 8003fc0:	40cc      	lsrs	r4, r1
 8003fc2:	4322      	orrs	r2, r4
 8003fc4:	410b      	asrs	r3, r1
 8003fc6:	ea43 0105 	orr.w	r1, r3, r5
 8003fca:	4610      	mov	r0, r2
 8003fcc:	e735      	b.n	8003e3a <__ieee754_fmod+0x46>
 8003fce:	291f      	cmp	r1, #31
 8003fd0:	dc07      	bgt.n	8003fe2 <__ieee754_fmod+0x1ee>
 8003fd2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8003fd6:	40cc      	lsrs	r4, r1
 8003fd8:	fa03 f202 	lsl.w	r2, r3, r2
 8003fdc:	4322      	orrs	r2, r4
 8003fde:	462b      	mov	r3, r5
 8003fe0:	e7f1      	b.n	8003fc6 <__ieee754_fmod+0x1d2>
 8003fe2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8003fe6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003fea:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8003fee:	32e2      	adds	r2, #226	; 0xe2
 8003ff0:	fa43 f202 	asr.w	r2, r3, r2
 8003ff4:	e7f3      	b.n	8003fde <__ieee754_fmod+0x1ea>
 8003ff6:	bf00      	nop
 8003ff8:	7fefffff 	.word	0x7fefffff
 8003ffc:	7ff00000 	.word	0x7ff00000
 8004000:	08004cf8 	.word	0x08004cf8
 8004004:	fffffbed 	.word	0xfffffbed
 8004008:	fffffc02 	.word	0xfffffc02
 800400c:	fffffbe2 	.word	0xfffffbe2

08004010 <__ieee754_rem_pio2>:
 8004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	ed2d 8b02 	vpush	{d8}
 8004018:	ec55 4b10 	vmov	r4, r5, d0
 800401c:	4bca      	ldr	r3, [pc, #808]	; (8004348 <__ieee754_rem_pio2+0x338>)
 800401e:	b08b      	sub	sp, #44	; 0x2c
 8004020:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004024:	4598      	cmp	r8, r3
 8004026:	4682      	mov	sl, r0
 8004028:	9502      	str	r5, [sp, #8]
 800402a:	dc08      	bgt.n	800403e <__ieee754_rem_pio2+0x2e>
 800402c:	2200      	movs	r2, #0
 800402e:	2300      	movs	r3, #0
 8004030:	ed80 0b00 	vstr	d0, [r0]
 8004034:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004038:	f04f 0b00 	mov.w	fp, #0
 800403c:	e028      	b.n	8004090 <__ieee754_rem_pio2+0x80>
 800403e:	4bc3      	ldr	r3, [pc, #780]	; (800434c <__ieee754_rem_pio2+0x33c>)
 8004040:	4598      	cmp	r8, r3
 8004042:	dc78      	bgt.n	8004136 <__ieee754_rem_pio2+0x126>
 8004044:	9b02      	ldr	r3, [sp, #8]
 8004046:	4ec2      	ldr	r6, [pc, #776]	; (8004350 <__ieee754_rem_pio2+0x340>)
 8004048:	2b00      	cmp	r3, #0
 800404a:	ee10 0a10 	vmov	r0, s0
 800404e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004310 <__ieee754_rem_pio2+0x300>)
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	4629      	mov	r1, r5
 8004056:	dd39      	ble.n	80040cc <__ieee754_rem_pio2+0xbc>
 8004058:	f7fc f8e2 	bl	8000220 <__aeabi_dsub>
 800405c:	45b0      	cmp	r8, r6
 800405e:	4604      	mov	r4, r0
 8004060:	460d      	mov	r5, r1
 8004062:	d01b      	beq.n	800409c <__ieee754_rem_pio2+0x8c>
 8004064:	a3ac      	add	r3, pc, #688	; (adr r3, 8004318 <__ieee754_rem_pio2+0x308>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc f8d9 	bl	8000220 <__aeabi_dsub>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	e9ca 2300 	strd	r2, r3, [sl]
 8004076:	4620      	mov	r0, r4
 8004078:	4629      	mov	r1, r5
 800407a:	f7fc f8d1 	bl	8000220 <__aeabi_dsub>
 800407e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004318 <__ieee754_rem_pio2+0x308>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc f8cc 	bl	8000220 <__aeabi_dsub>
 8004088:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800408c:	f04f 0b01 	mov.w	fp, #1
 8004090:	4658      	mov	r0, fp
 8004092:	b00b      	add	sp, #44	; 0x2c
 8004094:	ecbd 8b02 	vpop	{d8}
 8004098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004320 <__ieee754_rem_pio2+0x310>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f7fc f8bd 	bl	8000220 <__aeabi_dsub>
 80040a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004328 <__ieee754_rem_pio2+0x318>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	4604      	mov	r4, r0
 80040ae:	460d      	mov	r5, r1
 80040b0:	f7fc f8b6 	bl	8000220 <__aeabi_dsub>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	e9ca 2300 	strd	r2, r3, [sl]
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	f7fc f8ae 	bl	8000220 <__aeabi_dsub>
 80040c4:	a398      	add	r3, pc, #608	; (adr r3, 8004328 <__ieee754_rem_pio2+0x318>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	e7db      	b.n	8004084 <__ieee754_rem_pio2+0x74>
 80040cc:	f7fc f8aa 	bl	8000224 <__adddf3>
 80040d0:	45b0      	cmp	r8, r6
 80040d2:	4604      	mov	r4, r0
 80040d4:	460d      	mov	r5, r1
 80040d6:	d016      	beq.n	8004106 <__ieee754_rem_pio2+0xf6>
 80040d8:	a38f      	add	r3, pc, #572	; (adr r3, 8004318 <__ieee754_rem_pio2+0x308>)
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f7fc f8a1 	bl	8000224 <__adddf3>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	e9ca 2300 	strd	r2, r3, [sl]
 80040ea:	4620      	mov	r0, r4
 80040ec:	4629      	mov	r1, r5
 80040ee:	f7fc f897 	bl	8000220 <__aeabi_dsub>
 80040f2:	a389      	add	r3, pc, #548	; (adr r3, 8004318 <__ieee754_rem_pio2+0x308>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc f894 	bl	8000224 <__adddf3>
 80040fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8004100:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004104:	e7c4      	b.n	8004090 <__ieee754_rem_pio2+0x80>
 8004106:	a386      	add	r3, pc, #536	; (adr r3, 8004320 <__ieee754_rem_pio2+0x310>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc f88a 	bl	8000224 <__adddf3>
 8004110:	a385      	add	r3, pc, #532	; (adr r3, 8004328 <__ieee754_rem_pio2+0x318>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	4604      	mov	r4, r0
 8004118:	460d      	mov	r5, r1
 800411a:	f7fc f883 	bl	8000224 <__adddf3>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	e9ca 2300 	strd	r2, r3, [sl]
 8004126:	4620      	mov	r0, r4
 8004128:	4629      	mov	r1, r5
 800412a:	f7fc f879 	bl	8000220 <__aeabi_dsub>
 800412e:	a37e      	add	r3, pc, #504	; (adr r3, 8004328 <__ieee754_rem_pio2+0x318>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	e7e0      	b.n	80040f8 <__ieee754_rem_pio2+0xe8>
 8004136:	4b87      	ldr	r3, [pc, #540]	; (8004354 <__ieee754_rem_pio2+0x344>)
 8004138:	4598      	cmp	r8, r3
 800413a:	f300 80d8 	bgt.w	80042ee <__ieee754_rem_pio2+0x2de>
 800413e:	f000 f96d 	bl	800441c <fabs>
 8004142:	ec55 4b10 	vmov	r4, r5, d0
 8004146:	ee10 0a10 	vmov	r0, s0
 800414a:	a379      	add	r3, pc, #484	; (adr r3, 8004330 <__ieee754_rem_pio2+0x320>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	4629      	mov	r1, r5
 8004152:	f7fc fa1d 	bl	8000590 <__aeabi_dmul>
 8004156:	4b80      	ldr	r3, [pc, #512]	; (8004358 <__ieee754_rem_pio2+0x348>)
 8004158:	2200      	movs	r2, #0
 800415a:	f7fc f863 	bl	8000224 <__adddf3>
 800415e:	f7fc fcc7 	bl	8000af0 <__aeabi_d2iz>
 8004162:	4683      	mov	fp, r0
 8004164:	f7fc f9aa 	bl	80004bc <__aeabi_i2d>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	ec43 2b18 	vmov	d8, r2, r3
 8004170:	a367      	add	r3, pc, #412	; (adr r3, 8004310 <__ieee754_rem_pio2+0x300>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f7fc fa0b 	bl	8000590 <__aeabi_dmul>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4620      	mov	r0, r4
 8004180:	4629      	mov	r1, r5
 8004182:	f7fc f84d 	bl	8000220 <__aeabi_dsub>
 8004186:	a364      	add	r3, pc, #400	; (adr r3, 8004318 <__ieee754_rem_pio2+0x308>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	4606      	mov	r6, r0
 800418e:	460f      	mov	r7, r1
 8004190:	ec51 0b18 	vmov	r0, r1, d8
 8004194:	f7fc f9fc 	bl	8000590 <__aeabi_dmul>
 8004198:	f1bb 0f1f 	cmp.w	fp, #31
 800419c:	4604      	mov	r4, r0
 800419e:	460d      	mov	r5, r1
 80041a0:	dc0d      	bgt.n	80041be <__ieee754_rem_pio2+0x1ae>
 80041a2:	4b6e      	ldr	r3, [pc, #440]	; (800435c <__ieee754_rem_pio2+0x34c>)
 80041a4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80041a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ac:	4543      	cmp	r3, r8
 80041ae:	d006      	beq.n	80041be <__ieee754_rem_pio2+0x1ae>
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	4630      	mov	r0, r6
 80041b6:	4639      	mov	r1, r7
 80041b8:	f7fc f832 	bl	8000220 <__aeabi_dsub>
 80041bc:	e00e      	b.n	80041dc <__ieee754_rem_pio2+0x1cc>
 80041be:	462b      	mov	r3, r5
 80041c0:	4622      	mov	r2, r4
 80041c2:	4630      	mov	r0, r6
 80041c4:	4639      	mov	r1, r7
 80041c6:	f7fc f82b 	bl	8000220 <__aeabi_dsub>
 80041ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80041d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80041d8:	2b10      	cmp	r3, #16
 80041da:	dc02      	bgt.n	80041e2 <__ieee754_rem_pio2+0x1d2>
 80041dc:	e9ca 0100 	strd	r0, r1, [sl]
 80041e0:	e039      	b.n	8004256 <__ieee754_rem_pio2+0x246>
 80041e2:	a34f      	add	r3, pc, #316	; (adr r3, 8004320 <__ieee754_rem_pio2+0x310>)
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	ec51 0b18 	vmov	r0, r1, d8
 80041ec:	f7fc f9d0 	bl	8000590 <__aeabi_dmul>
 80041f0:	4604      	mov	r4, r0
 80041f2:	460d      	mov	r5, r1
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4630      	mov	r0, r6
 80041fa:	4639      	mov	r1, r7
 80041fc:	f7fc f810 	bl	8000220 <__aeabi_dsub>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4680      	mov	r8, r0
 8004206:	4689      	mov	r9, r1
 8004208:	4630      	mov	r0, r6
 800420a:	4639      	mov	r1, r7
 800420c:	f7fc f808 	bl	8000220 <__aeabi_dsub>
 8004210:	4622      	mov	r2, r4
 8004212:	462b      	mov	r3, r5
 8004214:	f7fc f804 	bl	8000220 <__aeabi_dsub>
 8004218:	a343      	add	r3, pc, #268	; (adr r3, 8004328 <__ieee754_rem_pio2+0x318>)
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	4604      	mov	r4, r0
 8004220:	460d      	mov	r5, r1
 8004222:	ec51 0b18 	vmov	r0, r1, d8
 8004226:	f7fc f9b3 	bl	8000590 <__aeabi_dmul>
 800422a:	4622      	mov	r2, r4
 800422c:	462b      	mov	r3, r5
 800422e:	f7fb fff7 	bl	8000220 <__aeabi_dsub>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4604      	mov	r4, r0
 8004238:	460d      	mov	r5, r1
 800423a:	4640      	mov	r0, r8
 800423c:	4649      	mov	r1, r9
 800423e:	f7fb ffef 	bl	8000220 <__aeabi_dsub>
 8004242:	9a03      	ldr	r2, [sp, #12]
 8004244:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b31      	cmp	r3, #49	; 0x31
 800424c:	dc24      	bgt.n	8004298 <__ieee754_rem_pio2+0x288>
 800424e:	e9ca 0100 	strd	r0, r1, [sl]
 8004252:	4646      	mov	r6, r8
 8004254:	464f      	mov	r7, r9
 8004256:	e9da 8900 	ldrd	r8, r9, [sl]
 800425a:	4630      	mov	r0, r6
 800425c:	4642      	mov	r2, r8
 800425e:	464b      	mov	r3, r9
 8004260:	4639      	mov	r1, r7
 8004262:	f7fb ffdd 	bl	8000220 <__aeabi_dsub>
 8004266:	462b      	mov	r3, r5
 8004268:	4622      	mov	r2, r4
 800426a:	f7fb ffd9 	bl	8000220 <__aeabi_dsub>
 800426e:	9b02      	ldr	r3, [sp, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004276:	f6bf af0b 	bge.w	8004090 <__ieee754_rem_pio2+0x80>
 800427a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800427e:	f8ca 3004 	str.w	r3, [sl, #4]
 8004282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004286:	f8ca 8000 	str.w	r8, [sl]
 800428a:	f8ca 0008 	str.w	r0, [sl, #8]
 800428e:	f8ca 300c 	str.w	r3, [sl, #12]
 8004292:	f1cb 0b00 	rsb	fp, fp, #0
 8004296:	e6fb      	b.n	8004090 <__ieee754_rem_pio2+0x80>
 8004298:	a327      	add	r3, pc, #156	; (adr r3, 8004338 <__ieee754_rem_pio2+0x328>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	ec51 0b18 	vmov	r0, r1, d8
 80042a2:	f7fc f975 	bl	8000590 <__aeabi_dmul>
 80042a6:	4604      	mov	r4, r0
 80042a8:	460d      	mov	r5, r1
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	f7fb ffb5 	bl	8000220 <__aeabi_dsub>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4606      	mov	r6, r0
 80042bc:	460f      	mov	r7, r1
 80042be:	4640      	mov	r0, r8
 80042c0:	4649      	mov	r1, r9
 80042c2:	f7fb ffad 	bl	8000220 <__aeabi_dsub>
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	f7fb ffa9 	bl	8000220 <__aeabi_dsub>
 80042ce:	a31c      	add	r3, pc, #112	; (adr r3, 8004340 <__ieee754_rem_pio2+0x330>)
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	4604      	mov	r4, r0
 80042d6:	460d      	mov	r5, r1
 80042d8:	ec51 0b18 	vmov	r0, r1, d8
 80042dc:	f7fc f958 	bl	8000590 <__aeabi_dmul>
 80042e0:	4622      	mov	r2, r4
 80042e2:	462b      	mov	r3, r5
 80042e4:	f7fb ff9c 	bl	8000220 <__aeabi_dsub>
 80042e8:	4604      	mov	r4, r0
 80042ea:	460d      	mov	r5, r1
 80042ec:	e760      	b.n	80041b0 <__ieee754_rem_pio2+0x1a0>
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <__ieee754_rem_pio2+0x350>)
 80042f0:	4598      	cmp	r8, r3
 80042f2:	dd37      	ble.n	8004364 <__ieee754_rem_pio2+0x354>
 80042f4:	ee10 2a10 	vmov	r2, s0
 80042f8:	462b      	mov	r3, r5
 80042fa:	4620      	mov	r0, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	f7fb ff8f 	bl	8000220 <__aeabi_dsub>
 8004302:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004306:	e9ca 0100 	strd	r0, r1, [sl]
 800430a:	e695      	b.n	8004038 <__ieee754_rem_pio2+0x28>
 800430c:	f3af 8000 	nop.w
 8004310:	54400000 	.word	0x54400000
 8004314:	3ff921fb 	.word	0x3ff921fb
 8004318:	1a626331 	.word	0x1a626331
 800431c:	3dd0b461 	.word	0x3dd0b461
 8004320:	1a600000 	.word	0x1a600000
 8004324:	3dd0b461 	.word	0x3dd0b461
 8004328:	2e037073 	.word	0x2e037073
 800432c:	3ba3198a 	.word	0x3ba3198a
 8004330:	6dc9c883 	.word	0x6dc9c883
 8004334:	3fe45f30 	.word	0x3fe45f30
 8004338:	2e000000 	.word	0x2e000000
 800433c:	3ba3198a 	.word	0x3ba3198a
 8004340:	252049c1 	.word	0x252049c1
 8004344:	397b839a 	.word	0x397b839a
 8004348:	3fe921fb 	.word	0x3fe921fb
 800434c:	4002d97b 	.word	0x4002d97b
 8004350:	3ff921fb 	.word	0x3ff921fb
 8004354:	413921fb 	.word	0x413921fb
 8004358:	3fe00000 	.word	0x3fe00000
 800435c:	08004d08 	.word	0x08004d08
 8004360:	7fefffff 	.word	0x7fefffff
 8004364:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004368:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800436c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8004370:	4620      	mov	r0, r4
 8004372:	460d      	mov	r5, r1
 8004374:	f7fc fbbc 	bl	8000af0 <__aeabi_d2iz>
 8004378:	f7fc f8a0 	bl	80004bc <__aeabi_i2d>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4620      	mov	r0, r4
 8004382:	4629      	mov	r1, r5
 8004384:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004388:	f7fb ff4a 	bl	8000220 <__aeabi_dsub>
 800438c:	4b21      	ldr	r3, [pc, #132]	; (8004414 <__ieee754_rem_pio2+0x404>)
 800438e:	2200      	movs	r2, #0
 8004390:	f7fc f8fe 	bl	8000590 <__aeabi_dmul>
 8004394:	460d      	mov	r5, r1
 8004396:	4604      	mov	r4, r0
 8004398:	f7fc fbaa 	bl	8000af0 <__aeabi_d2iz>
 800439c:	f7fc f88e 	bl	80004bc <__aeabi_i2d>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4620      	mov	r0, r4
 80043a6:	4629      	mov	r1, r5
 80043a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80043ac:	f7fb ff38 	bl	8000220 <__aeabi_dsub>
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <__ieee754_rem_pio2+0x404>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	f7fc f8ec 	bl	8000590 <__aeabi_dmul>
 80043b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80043bc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80043c0:	2703      	movs	r7, #3
 80043c2:	2400      	movs	r4, #0
 80043c4:	2500      	movs	r5, #0
 80043c6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	46b9      	mov	r9, r7
 80043d0:	3f01      	subs	r7, #1
 80043d2:	f7fc fb45 	bl	8000a60 <__aeabi_dcmpeq>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	d1f5      	bne.n	80043c6 <__ieee754_rem_pio2+0x3b6>
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <__ieee754_rem_pio2+0x408>)
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	2302      	movs	r3, #2
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	4632      	mov	r2, r6
 80043e4:	464b      	mov	r3, r9
 80043e6:	4651      	mov	r1, sl
 80043e8:	a804      	add	r0, sp, #16
 80043ea:	f000 f821 	bl	8004430 <__kernel_rem_pio2>
 80043ee:	9b02      	ldr	r3, [sp, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	4683      	mov	fp, r0
 80043f4:	f6bf ae4c 	bge.w	8004090 <__ieee754_rem_pio2+0x80>
 80043f8:	e9da 2100 	ldrd	r2, r1, [sl]
 80043fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004400:	e9ca 2300 	strd	r2, r3, [sl]
 8004404:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004408:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800440c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004410:	e73f      	b.n	8004292 <__ieee754_rem_pio2+0x282>
 8004412:	bf00      	nop
 8004414:	41700000 	.word	0x41700000
 8004418:	08004d88 	.word	0x08004d88

0800441c <fabs>:
 800441c:	ec51 0b10 	vmov	r0, r1, d0
 8004420:	ee10 2a10 	vmov	r2, s0
 8004424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004428:	ec43 2b10 	vmov	d0, r2, r3
 800442c:	4770      	bx	lr
	...

08004430 <__kernel_rem_pio2>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	ed2d 8b02 	vpush	{d8}
 8004438:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800443c:	f112 0f14 	cmn.w	r2, #20
 8004440:	9306      	str	r3, [sp, #24]
 8004442:	9104      	str	r1, [sp, #16]
 8004444:	4bc2      	ldr	r3, [pc, #776]	; (8004750 <__kernel_rem_pio2+0x320>)
 8004446:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004448:	9009      	str	r0, [sp, #36]	; 0x24
 800444a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	9b06      	ldr	r3, [sp, #24]
 8004452:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004456:	bfa8      	it	ge
 8004458:	1ed4      	subge	r4, r2, #3
 800445a:	9305      	str	r3, [sp, #20]
 800445c:	bfb2      	itee	lt
 800445e:	2400      	movlt	r4, #0
 8004460:	2318      	movge	r3, #24
 8004462:	fb94 f4f3 	sdivge	r4, r4, r3
 8004466:	f06f 0317 	mvn.w	r3, #23
 800446a:	fb04 3303 	mla	r3, r4, r3, r3
 800446e:	eb03 0a02 	add.w	sl, r3, r2
 8004472:	9b00      	ldr	r3, [sp, #0]
 8004474:	9a05      	ldr	r2, [sp, #20]
 8004476:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004740 <__kernel_rem_pio2+0x310>
 800447a:	eb03 0802 	add.w	r8, r3, r2
 800447e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004480:	1aa7      	subs	r7, r4, r2
 8004482:	ae20      	add	r6, sp, #128	; 0x80
 8004484:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004488:	2500      	movs	r5, #0
 800448a:	4545      	cmp	r5, r8
 800448c:	dd13      	ble.n	80044b6 <__kernel_rem_pio2+0x86>
 800448e:	9b06      	ldr	r3, [sp, #24]
 8004490:	aa20      	add	r2, sp, #128	; 0x80
 8004492:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004496:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800449a:	f04f 0800 	mov.w	r8, #0
 800449e:	9b00      	ldr	r3, [sp, #0]
 80044a0:	4598      	cmp	r8, r3
 80044a2:	dc31      	bgt.n	8004508 <__kernel_rem_pio2+0xd8>
 80044a4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004740 <__kernel_rem_pio2+0x310>
 80044a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80044ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80044b0:	462f      	mov	r7, r5
 80044b2:	2600      	movs	r6, #0
 80044b4:	e01b      	b.n	80044ee <__kernel_rem_pio2+0xbe>
 80044b6:	42ef      	cmn	r7, r5
 80044b8:	d407      	bmi.n	80044ca <__kernel_rem_pio2+0x9a>
 80044ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80044be:	f7fb fffd 	bl	80004bc <__aeabi_i2d>
 80044c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80044c6:	3501      	adds	r5, #1
 80044c8:	e7df      	b.n	800448a <__kernel_rem_pio2+0x5a>
 80044ca:	ec51 0b18 	vmov	r0, r1, d8
 80044ce:	e7f8      	b.n	80044c2 <__kernel_rem_pio2+0x92>
 80044d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80044d8:	f7fc f85a 	bl	8000590 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044e4:	f7fb fe9e 	bl	8000224 <__adddf3>
 80044e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044ec:	3601      	adds	r6, #1
 80044ee:	9b05      	ldr	r3, [sp, #20]
 80044f0:	429e      	cmp	r6, r3
 80044f2:	f1a7 0708 	sub.w	r7, r7, #8
 80044f6:	ddeb      	ble.n	80044d0 <__kernel_rem_pio2+0xa0>
 80044f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044fc:	f108 0801 	add.w	r8, r8, #1
 8004500:	ecab 7b02 	vstmia	fp!, {d7}
 8004504:	3508      	adds	r5, #8
 8004506:	e7ca      	b.n	800449e <__kernel_rem_pio2+0x6e>
 8004508:	9b00      	ldr	r3, [sp, #0]
 800450a:	aa0c      	add	r2, sp, #48	; 0x30
 800450c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004510:	930b      	str	r3, [sp, #44]	; 0x2c
 8004512:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004514:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004518:	9c00      	ldr	r4, [sp, #0]
 800451a:	930a      	str	r3, [sp, #40]	; 0x28
 800451c:	00e3      	lsls	r3, r4, #3
 800451e:	9308      	str	r3, [sp, #32]
 8004520:	ab98      	add	r3, sp, #608	; 0x260
 8004522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004526:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800452a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800452e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004530:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004534:	46c3      	mov	fp, r8
 8004536:	46a1      	mov	r9, r4
 8004538:	f1b9 0f00 	cmp.w	r9, #0
 800453c:	f1a5 0508 	sub.w	r5, r5, #8
 8004540:	dc77      	bgt.n	8004632 <__kernel_rem_pio2+0x202>
 8004542:	ec47 6b10 	vmov	d0, r6, r7
 8004546:	4650      	mov	r0, sl
 8004548:	f000 fac2 	bl	8004ad0 <scalbn>
 800454c:	ec57 6b10 	vmov	r6, r7, d0
 8004550:	2200      	movs	r2, #0
 8004552:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004556:	ee10 0a10 	vmov	r0, s0
 800455a:	4639      	mov	r1, r7
 800455c:	f7fc f818 	bl	8000590 <__aeabi_dmul>
 8004560:	ec41 0b10 	vmov	d0, r0, r1
 8004564:	f000 fb34 	bl	8004bd0 <floor>
 8004568:	4b7a      	ldr	r3, [pc, #488]	; (8004754 <__kernel_rem_pio2+0x324>)
 800456a:	ec51 0b10 	vmov	r0, r1, d0
 800456e:	2200      	movs	r2, #0
 8004570:	f7fc f80e 	bl	8000590 <__aeabi_dmul>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4630      	mov	r0, r6
 800457a:	4639      	mov	r1, r7
 800457c:	f7fb fe50 	bl	8000220 <__aeabi_dsub>
 8004580:	460f      	mov	r7, r1
 8004582:	4606      	mov	r6, r0
 8004584:	f7fc fab4 	bl	8000af0 <__aeabi_d2iz>
 8004588:	9002      	str	r0, [sp, #8]
 800458a:	f7fb ff97 	bl	80004bc <__aeabi_i2d>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4630      	mov	r0, r6
 8004594:	4639      	mov	r1, r7
 8004596:	f7fb fe43 	bl	8000220 <__aeabi_dsub>
 800459a:	f1ba 0f00 	cmp.w	sl, #0
 800459e:	4606      	mov	r6, r0
 80045a0:	460f      	mov	r7, r1
 80045a2:	dd6d      	ble.n	8004680 <__kernel_rem_pio2+0x250>
 80045a4:	1e61      	subs	r1, r4, #1
 80045a6:	ab0c      	add	r3, sp, #48	; 0x30
 80045a8:	9d02      	ldr	r5, [sp, #8]
 80045aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80045ae:	f1ca 0018 	rsb	r0, sl, #24
 80045b2:	fa43 f200 	asr.w	r2, r3, r0
 80045b6:	4415      	add	r5, r2
 80045b8:	4082      	lsls	r2, r0
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	aa0c      	add	r2, sp, #48	; 0x30
 80045be:	9502      	str	r5, [sp, #8]
 80045c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80045c4:	f1ca 0217 	rsb	r2, sl, #23
 80045c8:	fa43 fb02 	asr.w	fp, r3, r2
 80045cc:	f1bb 0f00 	cmp.w	fp, #0
 80045d0:	dd65      	ble.n	800469e <__kernel_rem_pio2+0x26e>
 80045d2:	9b02      	ldr	r3, [sp, #8]
 80045d4:	2200      	movs	r2, #0
 80045d6:	3301      	adds	r3, #1
 80045d8:	9302      	str	r3, [sp, #8]
 80045da:	4615      	mov	r5, r2
 80045dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80045e0:	4294      	cmp	r4, r2
 80045e2:	f300 809f 	bgt.w	8004724 <__kernel_rem_pio2+0x2f4>
 80045e6:	f1ba 0f00 	cmp.w	sl, #0
 80045ea:	dd07      	ble.n	80045fc <__kernel_rem_pio2+0x1cc>
 80045ec:	f1ba 0f01 	cmp.w	sl, #1
 80045f0:	f000 80c1 	beq.w	8004776 <__kernel_rem_pio2+0x346>
 80045f4:	f1ba 0f02 	cmp.w	sl, #2
 80045f8:	f000 80c7 	beq.w	800478a <__kernel_rem_pio2+0x35a>
 80045fc:	f1bb 0f02 	cmp.w	fp, #2
 8004600:	d14d      	bne.n	800469e <__kernel_rem_pio2+0x26e>
 8004602:	4632      	mov	r2, r6
 8004604:	463b      	mov	r3, r7
 8004606:	4954      	ldr	r1, [pc, #336]	; (8004758 <__kernel_rem_pio2+0x328>)
 8004608:	2000      	movs	r0, #0
 800460a:	f7fb fe09 	bl	8000220 <__aeabi_dsub>
 800460e:	4606      	mov	r6, r0
 8004610:	460f      	mov	r7, r1
 8004612:	2d00      	cmp	r5, #0
 8004614:	d043      	beq.n	800469e <__kernel_rem_pio2+0x26e>
 8004616:	4650      	mov	r0, sl
 8004618:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004748 <__kernel_rem_pio2+0x318>
 800461c:	f000 fa58 	bl	8004ad0 <scalbn>
 8004620:	4630      	mov	r0, r6
 8004622:	4639      	mov	r1, r7
 8004624:	ec53 2b10 	vmov	r2, r3, d0
 8004628:	f7fb fdfa 	bl	8000220 <__aeabi_dsub>
 800462c:	4606      	mov	r6, r0
 800462e:	460f      	mov	r7, r1
 8004630:	e035      	b.n	800469e <__kernel_rem_pio2+0x26e>
 8004632:	4b4a      	ldr	r3, [pc, #296]	; (800475c <__kernel_rem_pio2+0x32c>)
 8004634:	2200      	movs	r2, #0
 8004636:	4630      	mov	r0, r6
 8004638:	4639      	mov	r1, r7
 800463a:	f7fb ffa9 	bl	8000590 <__aeabi_dmul>
 800463e:	f7fc fa57 	bl	8000af0 <__aeabi_d2iz>
 8004642:	f7fb ff3b 	bl	80004bc <__aeabi_i2d>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	ec43 2b18 	vmov	d8, r2, r3
 800464e:	4b44      	ldr	r3, [pc, #272]	; (8004760 <__kernel_rem_pio2+0x330>)
 8004650:	2200      	movs	r2, #0
 8004652:	f7fb ff9d 	bl	8000590 <__aeabi_dmul>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4630      	mov	r0, r6
 800465c:	4639      	mov	r1, r7
 800465e:	f7fb fddf 	bl	8000220 <__aeabi_dsub>
 8004662:	f7fc fa45 	bl	8000af0 <__aeabi_d2iz>
 8004666:	e9d5 2300 	ldrd	r2, r3, [r5]
 800466a:	f84b 0b04 	str.w	r0, [fp], #4
 800466e:	ec51 0b18 	vmov	r0, r1, d8
 8004672:	f7fb fdd7 	bl	8000224 <__adddf3>
 8004676:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800467a:	4606      	mov	r6, r0
 800467c:	460f      	mov	r7, r1
 800467e:	e75b      	b.n	8004538 <__kernel_rem_pio2+0x108>
 8004680:	d106      	bne.n	8004690 <__kernel_rem_pio2+0x260>
 8004682:	1e63      	subs	r3, r4, #1
 8004684:	aa0c      	add	r2, sp, #48	; 0x30
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800468e:	e79d      	b.n	80045cc <__kernel_rem_pio2+0x19c>
 8004690:	4b34      	ldr	r3, [pc, #208]	; (8004764 <__kernel_rem_pio2+0x334>)
 8004692:	2200      	movs	r2, #0
 8004694:	f7fc fa02 	bl	8000a9c <__aeabi_dcmpge>
 8004698:	2800      	cmp	r0, #0
 800469a:	d140      	bne.n	800471e <__kernel_rem_pio2+0x2ee>
 800469c:	4683      	mov	fp, r0
 800469e:	2200      	movs	r2, #0
 80046a0:	2300      	movs	r3, #0
 80046a2:	4630      	mov	r0, r6
 80046a4:	4639      	mov	r1, r7
 80046a6:	f7fc f9db 	bl	8000a60 <__aeabi_dcmpeq>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	f000 80c1 	beq.w	8004832 <__kernel_rem_pio2+0x402>
 80046b0:	1e65      	subs	r5, r4, #1
 80046b2:	462b      	mov	r3, r5
 80046b4:	2200      	movs	r2, #0
 80046b6:	9900      	ldr	r1, [sp, #0]
 80046b8:	428b      	cmp	r3, r1
 80046ba:	da6d      	bge.n	8004798 <__kernel_rem_pio2+0x368>
 80046bc:	2a00      	cmp	r2, #0
 80046be:	f000 808a 	beq.w	80047d6 <__kernel_rem_pio2+0x3a6>
 80046c2:	ab0c      	add	r3, sp, #48	; 0x30
 80046c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80046c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80ae 	beq.w	800482e <__kernel_rem_pio2+0x3fe>
 80046d2:	4650      	mov	r0, sl
 80046d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004748 <__kernel_rem_pio2+0x318>
 80046d8:	f000 f9fa 	bl	8004ad0 <scalbn>
 80046dc:	1c6b      	adds	r3, r5, #1
 80046de:	00da      	lsls	r2, r3, #3
 80046e0:	9205      	str	r2, [sp, #20]
 80046e2:	ec57 6b10 	vmov	r6, r7, d0
 80046e6:	aa70      	add	r2, sp, #448	; 0x1c0
 80046e8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800475c <__kernel_rem_pio2+0x32c>
 80046ec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80046f0:	462c      	mov	r4, r5
 80046f2:	f04f 0800 	mov.w	r8, #0
 80046f6:	2c00      	cmp	r4, #0
 80046f8:	f280 80d4 	bge.w	80048a4 <__kernel_rem_pio2+0x474>
 80046fc:	462c      	mov	r4, r5
 80046fe:	2c00      	cmp	r4, #0
 8004700:	f2c0 8102 	blt.w	8004908 <__kernel_rem_pio2+0x4d8>
 8004704:	4b18      	ldr	r3, [pc, #96]	; (8004768 <__kernel_rem_pio2+0x338>)
 8004706:	461e      	mov	r6, r3
 8004708:	ab70      	add	r3, sp, #448	; 0x1c0
 800470a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800470e:	1b2b      	subs	r3, r5, r4
 8004710:	f04f 0900 	mov.w	r9, #0
 8004714:	f04f 0a00 	mov.w	sl, #0
 8004718:	2700      	movs	r7, #0
 800471a:	9306      	str	r3, [sp, #24]
 800471c:	e0e6      	b.n	80048ec <__kernel_rem_pio2+0x4bc>
 800471e:	f04f 0b02 	mov.w	fp, #2
 8004722:	e756      	b.n	80045d2 <__kernel_rem_pio2+0x1a2>
 8004724:	f8d8 3000 	ldr.w	r3, [r8]
 8004728:	bb05      	cbnz	r5, 800476c <__kernel_rem_pio2+0x33c>
 800472a:	b123      	cbz	r3, 8004736 <__kernel_rem_pio2+0x306>
 800472c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004730:	f8c8 3000 	str.w	r3, [r8]
 8004734:	2301      	movs	r3, #1
 8004736:	3201      	adds	r2, #1
 8004738:	f108 0804 	add.w	r8, r8, #4
 800473c:	461d      	mov	r5, r3
 800473e:	e74f      	b.n	80045e0 <__kernel_rem_pio2+0x1b0>
	...
 800474c:	3ff00000 	.word	0x3ff00000
 8004750:	08004ed0 	.word	0x08004ed0
 8004754:	40200000 	.word	0x40200000
 8004758:	3ff00000 	.word	0x3ff00000
 800475c:	3e700000 	.word	0x3e700000
 8004760:	41700000 	.word	0x41700000
 8004764:	3fe00000 	.word	0x3fe00000
 8004768:	08004e90 	.word	0x08004e90
 800476c:	1acb      	subs	r3, r1, r3
 800476e:	f8c8 3000 	str.w	r3, [r8]
 8004772:	462b      	mov	r3, r5
 8004774:	e7df      	b.n	8004736 <__kernel_rem_pio2+0x306>
 8004776:	1e62      	subs	r2, r4, #1
 8004778:	ab0c      	add	r3, sp, #48	; 0x30
 800477a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800477e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004782:	a90c      	add	r1, sp, #48	; 0x30
 8004784:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004788:	e738      	b.n	80045fc <__kernel_rem_pio2+0x1cc>
 800478a:	1e62      	subs	r2, r4, #1
 800478c:	ab0c      	add	r3, sp, #48	; 0x30
 800478e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004792:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004796:	e7f4      	b.n	8004782 <__kernel_rem_pio2+0x352>
 8004798:	a90c      	add	r1, sp, #48	; 0x30
 800479a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800479e:	3b01      	subs	r3, #1
 80047a0:	430a      	orrs	r2, r1
 80047a2:	e788      	b.n	80046b6 <__kernel_rem_pio2+0x286>
 80047a4:	3301      	adds	r3, #1
 80047a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80047aa:	2900      	cmp	r1, #0
 80047ac:	d0fa      	beq.n	80047a4 <__kernel_rem_pio2+0x374>
 80047ae:	9a08      	ldr	r2, [sp, #32]
 80047b0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80047b4:	446a      	add	r2, sp
 80047b6:	3a98      	subs	r2, #152	; 0x98
 80047b8:	9208      	str	r2, [sp, #32]
 80047ba:	9a06      	ldr	r2, [sp, #24]
 80047bc:	a920      	add	r1, sp, #128	; 0x80
 80047be:	18a2      	adds	r2, r4, r2
 80047c0:	18e3      	adds	r3, r4, r3
 80047c2:	f104 0801 	add.w	r8, r4, #1
 80047c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80047ca:	9302      	str	r3, [sp, #8]
 80047cc:	9b02      	ldr	r3, [sp, #8]
 80047ce:	4543      	cmp	r3, r8
 80047d0:	da04      	bge.n	80047dc <__kernel_rem_pio2+0x3ac>
 80047d2:	461c      	mov	r4, r3
 80047d4:	e6a2      	b.n	800451c <__kernel_rem_pio2+0xec>
 80047d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047d8:	2301      	movs	r3, #1
 80047da:	e7e4      	b.n	80047a6 <__kernel_rem_pio2+0x376>
 80047dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80047e2:	f7fb fe6b 	bl	80004bc <__aeabi_i2d>
 80047e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80047ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ec:	46ab      	mov	fp, r5
 80047ee:	461c      	mov	r4, r3
 80047f0:	f04f 0900 	mov.w	r9, #0
 80047f4:	2600      	movs	r6, #0
 80047f6:	2700      	movs	r7, #0
 80047f8:	9b05      	ldr	r3, [sp, #20]
 80047fa:	4599      	cmp	r9, r3
 80047fc:	dd06      	ble.n	800480c <__kernel_rem_pio2+0x3dc>
 80047fe:	9b08      	ldr	r3, [sp, #32]
 8004800:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004804:	f108 0801 	add.w	r8, r8, #1
 8004808:	9308      	str	r3, [sp, #32]
 800480a:	e7df      	b.n	80047cc <__kernel_rem_pio2+0x39c>
 800480c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004810:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004814:	f7fb febc 	bl	8000590 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4630      	mov	r0, r6
 800481e:	4639      	mov	r1, r7
 8004820:	f7fb fd00 	bl	8000224 <__adddf3>
 8004824:	f109 0901 	add.w	r9, r9, #1
 8004828:	4606      	mov	r6, r0
 800482a:	460f      	mov	r7, r1
 800482c:	e7e4      	b.n	80047f8 <__kernel_rem_pio2+0x3c8>
 800482e:	3d01      	subs	r5, #1
 8004830:	e747      	b.n	80046c2 <__kernel_rem_pio2+0x292>
 8004832:	ec47 6b10 	vmov	d0, r6, r7
 8004836:	f1ca 0000 	rsb	r0, sl, #0
 800483a:	f000 f949 	bl	8004ad0 <scalbn>
 800483e:	ec57 6b10 	vmov	r6, r7, d0
 8004842:	4ba0      	ldr	r3, [pc, #640]	; (8004ac4 <__kernel_rem_pio2+0x694>)
 8004844:	ee10 0a10 	vmov	r0, s0
 8004848:	2200      	movs	r2, #0
 800484a:	4639      	mov	r1, r7
 800484c:	f7fc f926 	bl	8000a9c <__aeabi_dcmpge>
 8004850:	b1f8      	cbz	r0, 8004892 <__kernel_rem_pio2+0x462>
 8004852:	4b9d      	ldr	r3, [pc, #628]	; (8004ac8 <__kernel_rem_pio2+0x698>)
 8004854:	2200      	movs	r2, #0
 8004856:	4630      	mov	r0, r6
 8004858:	4639      	mov	r1, r7
 800485a:	f7fb fe99 	bl	8000590 <__aeabi_dmul>
 800485e:	f7fc f947 	bl	8000af0 <__aeabi_d2iz>
 8004862:	4680      	mov	r8, r0
 8004864:	f7fb fe2a 	bl	80004bc <__aeabi_i2d>
 8004868:	4b96      	ldr	r3, [pc, #600]	; (8004ac4 <__kernel_rem_pio2+0x694>)
 800486a:	2200      	movs	r2, #0
 800486c:	f7fb fe90 	bl	8000590 <__aeabi_dmul>
 8004870:	460b      	mov	r3, r1
 8004872:	4602      	mov	r2, r0
 8004874:	4639      	mov	r1, r7
 8004876:	4630      	mov	r0, r6
 8004878:	f7fb fcd2 	bl	8000220 <__aeabi_dsub>
 800487c:	f7fc f938 	bl	8000af0 <__aeabi_d2iz>
 8004880:	1c65      	adds	r5, r4, #1
 8004882:	ab0c      	add	r3, sp, #48	; 0x30
 8004884:	f10a 0a18 	add.w	sl, sl, #24
 8004888:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800488c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004890:	e71f      	b.n	80046d2 <__kernel_rem_pio2+0x2a2>
 8004892:	4630      	mov	r0, r6
 8004894:	4639      	mov	r1, r7
 8004896:	f7fc f92b 	bl	8000af0 <__aeabi_d2iz>
 800489a:	ab0c      	add	r3, sp, #48	; 0x30
 800489c:	4625      	mov	r5, r4
 800489e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80048a2:	e716      	b.n	80046d2 <__kernel_rem_pio2+0x2a2>
 80048a4:	ab0c      	add	r3, sp, #48	; 0x30
 80048a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048aa:	f7fb fe07 	bl	80004bc <__aeabi_i2d>
 80048ae:	4632      	mov	r2, r6
 80048b0:	463b      	mov	r3, r7
 80048b2:	f7fb fe6d 	bl	8000590 <__aeabi_dmul>
 80048b6:	4642      	mov	r2, r8
 80048b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80048bc:	464b      	mov	r3, r9
 80048be:	4630      	mov	r0, r6
 80048c0:	4639      	mov	r1, r7
 80048c2:	f7fb fe65 	bl	8000590 <__aeabi_dmul>
 80048c6:	3c01      	subs	r4, #1
 80048c8:	4606      	mov	r6, r0
 80048ca:	460f      	mov	r7, r1
 80048cc:	e713      	b.n	80046f6 <__kernel_rem_pio2+0x2c6>
 80048ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80048d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80048d6:	f7fb fe5b 	bl	8000590 <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4648      	mov	r0, r9
 80048e0:	4651      	mov	r1, sl
 80048e2:	f7fb fc9f 	bl	8000224 <__adddf3>
 80048e6:	3701      	adds	r7, #1
 80048e8:	4681      	mov	r9, r0
 80048ea:	468a      	mov	sl, r1
 80048ec:	9b00      	ldr	r3, [sp, #0]
 80048ee:	429f      	cmp	r7, r3
 80048f0:	dc02      	bgt.n	80048f8 <__kernel_rem_pio2+0x4c8>
 80048f2:	9b06      	ldr	r3, [sp, #24]
 80048f4:	429f      	cmp	r7, r3
 80048f6:	ddea      	ble.n	80048ce <__kernel_rem_pio2+0x49e>
 80048f8:	9a06      	ldr	r2, [sp, #24]
 80048fa:	ab48      	add	r3, sp, #288	; 0x120
 80048fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004900:	e9c6 9a00 	strd	r9, sl, [r6]
 8004904:	3c01      	subs	r4, #1
 8004906:	e6fa      	b.n	80046fe <__kernel_rem_pio2+0x2ce>
 8004908:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800490a:	2b02      	cmp	r3, #2
 800490c:	dc0b      	bgt.n	8004926 <__kernel_rem_pio2+0x4f6>
 800490e:	2b00      	cmp	r3, #0
 8004910:	dc39      	bgt.n	8004986 <__kernel_rem_pio2+0x556>
 8004912:	d05d      	beq.n	80049d0 <__kernel_rem_pio2+0x5a0>
 8004914:	9b02      	ldr	r3, [sp, #8]
 8004916:	f003 0007 	and.w	r0, r3, #7
 800491a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800491e:	ecbd 8b02 	vpop	{d8}
 8004922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004926:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004928:	2b03      	cmp	r3, #3
 800492a:	d1f3      	bne.n	8004914 <__kernel_rem_pio2+0x4e4>
 800492c:	9b05      	ldr	r3, [sp, #20]
 800492e:	9500      	str	r5, [sp, #0]
 8004930:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004934:	eb0d 0403 	add.w	r4, sp, r3
 8004938:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800493c:	46a2      	mov	sl, r4
 800493e:	9b00      	ldr	r3, [sp, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f1aa 0a08 	sub.w	sl, sl, #8
 8004946:	dc69      	bgt.n	8004a1c <__kernel_rem_pio2+0x5ec>
 8004948:	46aa      	mov	sl, r5
 800494a:	f1ba 0f01 	cmp.w	sl, #1
 800494e:	f1a4 0408 	sub.w	r4, r4, #8
 8004952:	f300 8083 	bgt.w	8004a5c <__kernel_rem_pio2+0x62c>
 8004956:	9c05      	ldr	r4, [sp, #20]
 8004958:	ab48      	add	r3, sp, #288	; 0x120
 800495a:	441c      	add	r4, r3
 800495c:	2000      	movs	r0, #0
 800495e:	2100      	movs	r1, #0
 8004960:	2d01      	cmp	r5, #1
 8004962:	f300 809a 	bgt.w	8004a9a <__kernel_rem_pio2+0x66a>
 8004966:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800496a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800496e:	f1bb 0f00 	cmp.w	fp, #0
 8004972:	f040 8098 	bne.w	8004aa6 <__kernel_rem_pio2+0x676>
 8004976:	9b04      	ldr	r3, [sp, #16]
 8004978:	e9c3 7800 	strd	r7, r8, [r3]
 800497c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004980:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004984:	e7c6      	b.n	8004914 <__kernel_rem_pio2+0x4e4>
 8004986:	9e05      	ldr	r6, [sp, #20]
 8004988:	ab48      	add	r3, sp, #288	; 0x120
 800498a:	441e      	add	r6, r3
 800498c:	462c      	mov	r4, r5
 800498e:	2000      	movs	r0, #0
 8004990:	2100      	movs	r1, #0
 8004992:	2c00      	cmp	r4, #0
 8004994:	da33      	bge.n	80049fe <__kernel_rem_pio2+0x5ce>
 8004996:	f1bb 0f00 	cmp.w	fp, #0
 800499a:	d036      	beq.n	8004a0a <__kernel_rem_pio2+0x5da>
 800499c:	4602      	mov	r2, r0
 800499e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049a2:	9c04      	ldr	r4, [sp, #16]
 80049a4:	e9c4 2300 	strd	r2, r3, [r4]
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80049b0:	f7fb fc36 	bl	8000220 <__aeabi_dsub>
 80049b4:	ae4a      	add	r6, sp, #296	; 0x128
 80049b6:	2401      	movs	r4, #1
 80049b8:	42a5      	cmp	r5, r4
 80049ba:	da29      	bge.n	8004a10 <__kernel_rem_pio2+0x5e0>
 80049bc:	f1bb 0f00 	cmp.w	fp, #0
 80049c0:	d002      	beq.n	80049c8 <__kernel_rem_pio2+0x598>
 80049c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049c6:	4619      	mov	r1, r3
 80049c8:	9b04      	ldr	r3, [sp, #16]
 80049ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80049ce:	e7a1      	b.n	8004914 <__kernel_rem_pio2+0x4e4>
 80049d0:	9c05      	ldr	r4, [sp, #20]
 80049d2:	ab48      	add	r3, sp, #288	; 0x120
 80049d4:	441c      	add	r4, r3
 80049d6:	2000      	movs	r0, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	2d00      	cmp	r5, #0
 80049dc:	da09      	bge.n	80049f2 <__kernel_rem_pio2+0x5c2>
 80049de:	f1bb 0f00 	cmp.w	fp, #0
 80049e2:	d002      	beq.n	80049ea <__kernel_rem_pio2+0x5ba>
 80049e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049e8:	4619      	mov	r1, r3
 80049ea:	9b04      	ldr	r3, [sp, #16]
 80049ec:	e9c3 0100 	strd	r0, r1, [r3]
 80049f0:	e790      	b.n	8004914 <__kernel_rem_pio2+0x4e4>
 80049f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80049f6:	f7fb fc15 	bl	8000224 <__adddf3>
 80049fa:	3d01      	subs	r5, #1
 80049fc:	e7ed      	b.n	80049da <__kernel_rem_pio2+0x5aa>
 80049fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004a02:	f7fb fc0f 	bl	8000224 <__adddf3>
 8004a06:	3c01      	subs	r4, #1
 8004a08:	e7c3      	b.n	8004992 <__kernel_rem_pio2+0x562>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	e7c8      	b.n	80049a2 <__kernel_rem_pio2+0x572>
 8004a10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004a14:	f7fb fc06 	bl	8000224 <__adddf3>
 8004a18:	3401      	adds	r4, #1
 8004a1a:	e7cd      	b.n	80049b8 <__kernel_rem_pio2+0x588>
 8004a1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004a24:	9b00      	ldr	r3, [sp, #0]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	4632      	mov	r2, r6
 8004a2c:	463b      	mov	r3, r7
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4649      	mov	r1, r9
 8004a32:	f7fb fbf7 	bl	8000224 <__adddf3>
 8004a36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4640      	mov	r0, r8
 8004a40:	4649      	mov	r1, r9
 8004a42:	f7fb fbed 	bl	8000220 <__aeabi_dsub>
 8004a46:	4632      	mov	r2, r6
 8004a48:	463b      	mov	r3, r7
 8004a4a:	f7fb fbeb 	bl	8000224 <__adddf3>
 8004a4e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004a52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a56:	ed8a 7b00 	vstr	d7, [sl]
 8004a5a:	e770      	b.n	800493e <__kernel_rem_pio2+0x50e>
 8004a5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004a60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004a64:	4640      	mov	r0, r8
 8004a66:	4632      	mov	r2, r6
 8004a68:	463b      	mov	r3, r7
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	f7fb fbda 	bl	8000224 <__adddf3>
 8004a70:	e9cd 0100 	strd	r0, r1, [sp]
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb fbd0 	bl	8000220 <__aeabi_dsub>
 8004a80:	4632      	mov	r2, r6
 8004a82:	463b      	mov	r3, r7
 8004a84:	f7fb fbce 	bl	8000224 <__adddf3>
 8004a88:	ed9d 7b00 	vldr	d7, [sp]
 8004a8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004a90:	ed84 7b00 	vstr	d7, [r4]
 8004a94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a98:	e757      	b.n	800494a <__kernel_rem_pio2+0x51a>
 8004a9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004a9e:	f7fb fbc1 	bl	8000224 <__adddf3>
 8004aa2:	3d01      	subs	r5, #1
 8004aa4:	e75c      	b.n	8004960 <__kernel_rem_pio2+0x530>
 8004aa6:	9b04      	ldr	r3, [sp, #16]
 8004aa8:	9a04      	ldr	r2, [sp, #16]
 8004aaa:	601f      	str	r7, [r3, #0]
 8004aac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004ab0:	605c      	str	r4, [r3, #4]
 8004ab2:	609d      	str	r5, [r3, #8]
 8004ab4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004ab8:	60d3      	str	r3, [r2, #12]
 8004aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004abe:	6110      	str	r0, [r2, #16]
 8004ac0:	6153      	str	r3, [r2, #20]
 8004ac2:	e727      	b.n	8004914 <__kernel_rem_pio2+0x4e4>
 8004ac4:	41700000 	.word	0x41700000
 8004ac8:	3e700000 	.word	0x3e700000
 8004acc:	00000000 	.word	0x00000000

08004ad0 <scalbn>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	ec55 4b10 	vmov	r4, r5, d0
 8004ad6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004ada:	4606      	mov	r6, r0
 8004adc:	462b      	mov	r3, r5
 8004ade:	b999      	cbnz	r1, 8004b08 <scalbn+0x38>
 8004ae0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004ae4:	4323      	orrs	r3, r4
 8004ae6:	d03f      	beq.n	8004b68 <scalbn+0x98>
 8004ae8:	4b35      	ldr	r3, [pc, #212]	; (8004bc0 <scalbn+0xf0>)
 8004aea:	4629      	mov	r1, r5
 8004aec:	ee10 0a10 	vmov	r0, s0
 8004af0:	2200      	movs	r2, #0
 8004af2:	f7fb fd4d 	bl	8000590 <__aeabi_dmul>
 8004af6:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <scalbn+0xf4>)
 8004af8:	429e      	cmp	r6, r3
 8004afa:	4604      	mov	r4, r0
 8004afc:	460d      	mov	r5, r1
 8004afe:	da10      	bge.n	8004b22 <scalbn+0x52>
 8004b00:	a327      	add	r3, pc, #156	; (adr r3, 8004ba0 <scalbn+0xd0>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	e01f      	b.n	8004b48 <scalbn+0x78>
 8004b08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b0c:	4291      	cmp	r1, r2
 8004b0e:	d10c      	bne.n	8004b2a <scalbn+0x5a>
 8004b10:	ee10 2a10 	vmov	r2, s0
 8004b14:	4620      	mov	r0, r4
 8004b16:	4629      	mov	r1, r5
 8004b18:	f7fb fb84 	bl	8000224 <__adddf3>
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	460d      	mov	r5, r1
 8004b20:	e022      	b.n	8004b68 <scalbn+0x98>
 8004b22:	460b      	mov	r3, r1
 8004b24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004b28:	3936      	subs	r1, #54	; 0x36
 8004b2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004b2e:	4296      	cmp	r6, r2
 8004b30:	dd0d      	ble.n	8004b4e <scalbn+0x7e>
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	a11c      	add	r1, pc, #112	; (adr r1, 8004ba8 <scalbn+0xd8>)
 8004b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b3a:	da02      	bge.n	8004b42 <scalbn+0x72>
 8004b3c:	a11c      	add	r1, pc, #112	; (adr r1, 8004bb0 <scalbn+0xe0>)
 8004b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b42:	a319      	add	r3, pc, #100	; (adr r3, 8004ba8 <scalbn+0xd8>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fd22 	bl	8000590 <__aeabi_dmul>
 8004b4c:	e7e6      	b.n	8004b1c <scalbn+0x4c>
 8004b4e:	1872      	adds	r2, r6, r1
 8004b50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004b54:	428a      	cmp	r2, r1
 8004b56:	dcec      	bgt.n	8004b32 <scalbn+0x62>
 8004b58:	2a00      	cmp	r2, #0
 8004b5a:	dd08      	ble.n	8004b6e <scalbn+0x9e>
 8004b5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b68:	ec45 4b10 	vmov	d0, r4, r5
 8004b6c:	bd70      	pop	{r4, r5, r6, pc}
 8004b6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004b72:	da08      	bge.n	8004b86 <scalbn+0xb6>
 8004b74:	2d00      	cmp	r5, #0
 8004b76:	a10a      	add	r1, pc, #40	; (adr r1, 8004ba0 <scalbn+0xd0>)
 8004b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b7c:	dac0      	bge.n	8004b00 <scalbn+0x30>
 8004b7e:	a10e      	add	r1, pc, #56	; (adr r1, 8004bb8 <scalbn+0xe8>)
 8004b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b84:	e7bc      	b.n	8004b00 <scalbn+0x30>
 8004b86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b8a:	3236      	adds	r2, #54	; 0x36
 8004b8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004b94:	4620      	mov	r0, r4
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <scalbn+0xf8>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	e7d5      	b.n	8004b48 <scalbn+0x78>
 8004b9c:	f3af 8000 	nop.w
 8004ba0:	c2f8f359 	.word	0xc2f8f359
 8004ba4:	01a56e1f 	.word	0x01a56e1f
 8004ba8:	8800759c 	.word	0x8800759c
 8004bac:	7e37e43c 	.word	0x7e37e43c
 8004bb0:	8800759c 	.word	0x8800759c
 8004bb4:	fe37e43c 	.word	0xfe37e43c
 8004bb8:	c2f8f359 	.word	0xc2f8f359
 8004bbc:	81a56e1f 	.word	0x81a56e1f
 8004bc0:	43500000 	.word	0x43500000
 8004bc4:	ffff3cb0 	.word	0xffff3cb0
 8004bc8:	3c900000 	.word	0x3c900000
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <floor>:
 8004bd0:	ec51 0b10 	vmov	r0, r1, d0
 8004bd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bdc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004be0:	2e13      	cmp	r6, #19
 8004be2:	ee10 5a10 	vmov	r5, s0
 8004be6:	ee10 8a10 	vmov	r8, s0
 8004bea:	460c      	mov	r4, r1
 8004bec:	dc31      	bgt.n	8004c52 <floor+0x82>
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	da14      	bge.n	8004c1c <floor+0x4c>
 8004bf2:	a333      	add	r3, pc, #204	; (adr r3, 8004cc0 <floor+0xf0>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fb14 	bl	8000224 <__adddf3>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f7fb ff56 	bl	8000ab0 <__aeabi_dcmpgt>
 8004c04:	b138      	cbz	r0, 8004c16 <floor+0x46>
 8004c06:	2c00      	cmp	r4, #0
 8004c08:	da53      	bge.n	8004cb2 <floor+0xe2>
 8004c0a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004c0e:	4325      	orrs	r5, r4
 8004c10:	d052      	beq.n	8004cb8 <floor+0xe8>
 8004c12:	4c2d      	ldr	r4, [pc, #180]	; (8004cc8 <floor+0xf8>)
 8004c14:	2500      	movs	r5, #0
 8004c16:	4621      	mov	r1, r4
 8004c18:	4628      	mov	r0, r5
 8004c1a:	e024      	b.n	8004c66 <floor+0x96>
 8004c1c:	4f2b      	ldr	r7, [pc, #172]	; (8004ccc <floor+0xfc>)
 8004c1e:	4137      	asrs	r7, r6
 8004c20:	ea01 0307 	and.w	r3, r1, r7
 8004c24:	4303      	orrs	r3, r0
 8004c26:	d01e      	beq.n	8004c66 <floor+0x96>
 8004c28:	a325      	add	r3, pc, #148	; (adr r3, 8004cc0 <floor+0xf0>)
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f7fb faf9 	bl	8000224 <__adddf3>
 8004c32:	2200      	movs	r2, #0
 8004c34:	2300      	movs	r3, #0
 8004c36:	f7fb ff3b 	bl	8000ab0 <__aeabi_dcmpgt>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d0eb      	beq.n	8004c16 <floor+0x46>
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	bfbe      	ittt	lt
 8004c42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004c46:	4133      	asrlt	r3, r6
 8004c48:	18e4      	addlt	r4, r4, r3
 8004c4a:	ea24 0407 	bic.w	r4, r4, r7
 8004c4e:	2500      	movs	r5, #0
 8004c50:	e7e1      	b.n	8004c16 <floor+0x46>
 8004c52:	2e33      	cmp	r6, #51	; 0x33
 8004c54:	dd0b      	ble.n	8004c6e <floor+0x9e>
 8004c56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004c5a:	d104      	bne.n	8004c66 <floor+0x96>
 8004c5c:	ee10 2a10 	vmov	r2, s0
 8004c60:	460b      	mov	r3, r1
 8004c62:	f7fb fadf 	bl	8000224 <__adddf3>
 8004c66:	ec41 0b10 	vmov	d0, r0, r1
 8004c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c6e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8004c72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004c76:	40df      	lsrs	r7, r3
 8004c78:	4238      	tst	r0, r7
 8004c7a:	d0f4      	beq.n	8004c66 <floor+0x96>
 8004c7c:	a310      	add	r3, pc, #64	; (adr r3, 8004cc0 <floor+0xf0>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb facf 	bl	8000224 <__adddf3>
 8004c86:	2200      	movs	r2, #0
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f7fb ff11 	bl	8000ab0 <__aeabi_dcmpgt>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d0c1      	beq.n	8004c16 <floor+0x46>
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	da0a      	bge.n	8004cac <floor+0xdc>
 8004c96:	2e14      	cmp	r6, #20
 8004c98:	d101      	bne.n	8004c9e <floor+0xce>
 8004c9a:	3401      	adds	r4, #1
 8004c9c:	e006      	b.n	8004cac <floor+0xdc>
 8004c9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	40b3      	lsls	r3, r6
 8004ca6:	441d      	add	r5, r3
 8004ca8:	45a8      	cmp	r8, r5
 8004caa:	d8f6      	bhi.n	8004c9a <floor+0xca>
 8004cac:	ea25 0507 	bic.w	r5, r5, r7
 8004cb0:	e7b1      	b.n	8004c16 <floor+0x46>
 8004cb2:	2500      	movs	r5, #0
 8004cb4:	462c      	mov	r4, r5
 8004cb6:	e7ae      	b.n	8004c16 <floor+0x46>
 8004cb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004cbc:	e7ab      	b.n	8004c16 <floor+0x46>
 8004cbe:	bf00      	nop
 8004cc0:	8800759c 	.word	0x8800759c
 8004cc4:	7e37e43c 	.word	0x7e37e43c
 8004cc8:	bff00000 	.word	0xbff00000
 8004ccc:	000fffff 	.word	0x000fffff

08004cd0 <_init>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	bf00      	nop
 8004cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd6:	bc08      	pop	{r3}
 8004cd8:	469e      	mov	lr, r3
 8004cda:	4770      	bx	lr

08004cdc <_fini>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr
